<Type Name="ShortTensor" FullName="TorchSharp.Tensor.ShortTensor">
  <TypeSignature Language="C#" Value="public class ShortTensor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ShortTensor extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>TorchSharp</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
              Tensor of type Short.
              This tensor maps to a Torch variable (see torch/csrc/autograd/variable.h).
              Please do not mix Aten Tensors and Torch Tensors.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ShortTensor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arange">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Arange (short start, short stop, short step, string device = &quot;cpu&quot;, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Arange(int16 start, int16 stop, int16 step, string device, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int16" />
        <Parameter Name="stop" Type="System.Int16" />
        <Parameter Name="step" Type="System.Int16" />
        <Parameter Name="device" Type="System.String" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="stop">To be added.</param>
        <param name="step">To be added.</param>
        <param name="device">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>
            Creates 1-D tensor of size [(end - start) / step] with values from interval [start, end) and
            common difference step, starting from start
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Empty (long[] size, string device = &quot;cpu&quot;, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Empty(int64[] size, string device, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64[]" />
        <Parameter Name="device" Type="System.String" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="device">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>
             Create a new tensor filled with ones
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor From (short scalar, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor From(int16 scalar, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Int16" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scalar">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor From (short[] rawArray, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor From(int16[] rawArray, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawArray" Type="System.Int16[]" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rawArray">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor From (short[] rawArray, long[] dimensions, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor From(int16[] rawArray, int64[] dimensions, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawArray" Type="System.Int16[]" />
        <Parameter Name="dimensions" Type="System.Int64[]" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rawArray">To be added.</param>
        <param name="dimensions">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor From (IntPtr rawArray, long[] dimensions, bool requiresGrad);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor From(native int rawArray, int64[] dimensions, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawArray" Type="System.IntPtr" />
        <Parameter Name="dimensions" Type="System.Int64[]" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rawArray">To be added.</param>
        <param name="dimensions">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ones">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Ones (long[] size, string device = &quot;cpu&quot;, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Ones(int64[] size, string device, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64[]" />
        <Parameter Name="device" Type="System.String" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="device">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>
             Create a new tensor filled with ones
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Random">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Random (long[] size, string device = &quot;cpu&quot;, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Random(int64[] size, string device, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64[]" />
        <Parameter Name="device" Type="System.String" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="device">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>
             Create a new tensor filled with random values taken from a uniform distribution in [0, 1).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomN">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor RandomN (long[] size, string device = &quot;cpu&quot;, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor RandomN(int64[] size, string device, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64[]" />
        <Parameter Name="device" Type="System.String" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="device">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>
             Create a new tensor filled with random values taken from a normal distribution with mean 0 and variance 1.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sparse">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Sparse (TorchSharp.Tensor.TorchTensor indices, TorchSharp.Tensor.TorchTensor values, long[] size, string device = &quot;cpu&quot;, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Sparse(valuetype TorchSharp.Tensor.TorchTensor indices, valuetype TorchSharp.Tensor.TorchTensor values, int64[] size, string device, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="TorchSharp.Tensor.TorchTensor" />
        <Parameter Name="values" Type="TorchSharp.Tensor.TorchTensor" />
        <Parameter Name="size" Type="System.Int64[]" />
        <Parameter Name="device" Type="System.String" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indices">To be added.</param>
        <param name="values">To be added.</param>
        <param name="size">To be added.</param>
        <param name="device">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zeros">
      <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Zeros (long[] size, string device = &quot;cpu&quot;, bool requiresGrad = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Zeros(int64[] size, string device, bool requiresGrad) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int64[]" />
        <Parameter Name="device" Type="System.String" />
        <Parameter Name="requiresGrad" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="device">To be added.</param>
        <param name="requiresGrad">To be added.</param>
        <summary>
             Create a new tensor filled with zeros
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
