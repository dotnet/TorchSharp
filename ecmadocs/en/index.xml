<Overview>
  <Assemblies>
    <Assembly Name="TorchSharp" Version="1.0.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 4b 86 c4 cb 78 54 9b 34 ba b6 1a 3b 18 00 e2 3b fe b5 b3 ec 39 00 74 04 15 36 a7 e3 cb d9 7f 5f 04 cf 0f 85 71 55 a8 92 8e aa 29 eb fd 11 cf bb ad 3b a7 0e fe a7 bd a3 22 6c 6a 8d 37 0a 4c d3 03 f7 14 48 6b 6e bc 22 59 85 a6 38 47 1e 6e f5 71 cc 92 a4 61 3c 00 b8 fa 65 d6 1c ce e0 cb e5 f3 63 30 c9 a0 1f 41 83 55 9f 1b ef 24 cc 29 17 c6 d9 13 e3 a5 41 33 3a 1d 05 d9 be d2 2b 38 cb ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.Default | System.Diagnostics.DebuggableAttribute+DebuggingModes.DisableOptimizations | System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints | System.Diagnostics.DebuggableAttribute+DebuggingModes.EnableEditAndContinue)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("TorchSharp")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("0.2.27925.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("0.2.27925.0 @BuiltBy: miguel-iMac.local @Branch: master @SrcCode: https://github.com/dotnet/machinelearning/tree/584cb0b531c52086b0661b4fe12e5202db6c2353+584cb0b531c52086b0661b4fe12e5202db6c2353")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft® .NET Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("TorchSharp")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="">
      <Type Name="AllocatePinnedArray" Kind="Delegate" />
    </Namespace>
    <Namespace Name="TorchSharp">
      <Type Name="AutoGradMode" Kind="Class" />
      <Type Name="Scalar" Kind="Class" />
      <Type Name="ScalarExtensionMethods" Kind="Class" />
      <Type Name="Torch" Kind="Class" />
    </Namespace>
    <Namespace Name="TorchSharp.Data">
      <Type Name="DataIterator" Kind="Class" />
      <Type Name="DataIterator+HType" Kind="Class" />
      <Type Name="Loader" Kind="Class" />
    </Namespace>
    <Namespace Name="TorchSharp.JIT">
      <Type Name="DynamicType" Kind="Class" />
      <Type Name="Module" Kind="Class" />
      <Type Name="TensorType" Kind="Class" />
      <Type Name="Type" Kind="Class" />
    </Namespace>
    <Namespace Name="TorchSharp.NN">
      <Type Name="AdaptiveAvgPool2D" Kind="Class" />
      <Type Name="Conv2D" Kind="Class" />
      <Type Name="Dropout" Kind="Class" />
      <Type Name="FeatureDropout" Kind="Class" />
      <Type Name="FunctionalModule`1" DisplayName="FunctionalModule&lt;T&gt;" Kind="Class" />
      <Type Name="Init" Kind="Class" />
      <Type Name="Linear" Kind="Class" />
      <Type Name="LogSoftMax" Kind="Class" />
      <Type Name="LossFunction" Kind="Class" />
      <Type Name="LossFunction+Loss" Kind="Delegate" />
      <Type Name="MaxPool2D" Kind="Class" />
      <Type Name="Module" Kind="Class" />
      <Type Name="Optimizer" Kind="Class" />
      <Type Name="Parameter" Kind="Structure" />
      <Type Name="ProvidedModule" Kind="Class" />
      <Type Name="Reduction" Kind="Enumeration" />
      <Type Name="ReLU" Kind="Class" />
      <Type Name="Sequential" Kind="Class" />
    </Namespace>
    <Namespace Name="TorchSharp.Tensor">
      <Type Name="ATenScalarMapping" Kind="Enumeration" />
      <Type Name="ByteTensor" Kind="Class" />
      <Type Name="DoubleTensor" Kind="Class" />
      <Type Name="FloatTensor" Kind="Class" />
      <Type Name="IntTensor" Kind="Class" />
      <Type Name="LongTensor" Kind="Class" />
      <Type Name="ShortTensor" Kind="Class" />
      <Type Name="TensorExtensionMethods" Kind="Class" />
      <Type Name="TorchTensor" Kind="Structure" />
    </Namespace>
  </Types>
  <Title>TorchSharp</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Byte" />
      </Targets>
      <Member MemberName="ToScalar">
        <MemberSignature Language="C#" Value="public static TorchSharp.Scalar ToScalar (this byte value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.Scalar ToScalar(unsigned int8 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Scalar</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Byte" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.ScalarExtensionMethods" Member="M:TorchSharp.ScalarExtensionMethods.ToScalar(System.Byte)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Double" />
      </Targets>
      <Member MemberName="ToScalar">
        <MemberSignature Language="C#" Value="public static TorchSharp.Scalar ToScalar (this double value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.Scalar ToScalar(float64 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Scalar</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Double" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.ScalarExtensionMethods" Member="M:TorchSharp.ScalarExtensionMethods.ToScalar(System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int16" />
      </Targets>
      <Member MemberName="ToScalar">
        <MemberSignature Language="C#" Value="public static TorchSharp.Scalar ToScalar (this short value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.Scalar ToScalar(int16 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Scalar</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int16" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.ScalarExtensionMethods" Member="M:TorchSharp.ScalarExtensionMethods.ToScalar(System.Int16)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int32" />
      </Targets>
      <Member MemberName="ToScalar">
        <MemberSignature Language="C#" Value="public static TorchSharp.Scalar ToScalar (this int value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.Scalar ToScalar(int32 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Scalar</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int32" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.ScalarExtensionMethods" Member="M:TorchSharp.ScalarExtensionMethods.ToScalar(System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Int64" />
      </Targets>
      <Member MemberName="ToScalar">
        <MemberSignature Language="C#" Value="public static TorchSharp.Scalar ToScalar (this long value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.Scalar ToScalar(int64 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Scalar</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Int64" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.ScalarExtensionMethods" Member="M:TorchSharp.ScalarExtensionMethods.ToScalar(System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Single" />
      </Targets>
      <Member MemberName="ToScalar">
        <MemberSignature Language="C#" Value="public static TorchSharp.Scalar ToScalar (this float value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class TorchSharp.Scalar ToScalar(float32 value) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Scalar</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="value" Type="System.Single" RefType="this" />
        </Parameters>
        <Docs>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.ScalarExtensionMethods" Member="M:TorchSharp.ScalarExtensionMethods.ToScalar(System.Single)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:TorchSharp.Tensor.TorchTensor" />
      </Targets>
      <Member MemberName="Cat">
        <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Cat (this TorchSharp.Tensor.TorchTensor[] tensors, long dimension);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Cat(valuetype TorchSharp.Tensor.TorchTensor[] tensors, int64 dimension) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tensors" Type="TorchSharp.Tensor.TorchTensor[]" RefType="this" />
          <Parameter Name="dimension" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="tensors">To be added.</param>
          <param name="dimension">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.Tensor.TensorExtensionMethods" Member="M:TorchSharp.Tensor.TensorExtensionMethods.Cat(TorchSharp.Tensor.TorchTensor[],System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:TorchSharp.Tensor.TorchTensor" />
      </Targets>
      <Member MemberName="Stack">
        <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor Stack (this TorchSharp.Tensor.TorchTensor[] tensors, long dimension);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor Stack(valuetype TorchSharp.Tensor.TorchTensor[] tensors, int64 dimension) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="tensors" Type="TorchSharp.Tensor.TorchTensor[]" RefType="this" />
          <Parameter Name="dimension" Type="System.Int64" />
        </Parameters>
        <Docs>
          <param name="tensors">To be added.</param>
          <param name="dimension">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.Tensor.TensorExtensionMethods" Member="M:TorchSharp.Tensor.TensorExtensionMethods.Stack(TorchSharp.Tensor.TorchTensor[],System.Int64)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="ToTorchTensor&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor ToTorchTensor&lt;T&gt; (this T scalar, bool requiresGrad = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor ToTorchTensor&lt;T&gt;(!!T scalar, bool requiresGrad) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scalar" Type="T" RefType="this" />
          <Parameter Name="requiresGrad" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="scalar">To be added.</param>
          <param name="requiresGrad">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.Tensor.TensorExtensionMethods" Member="M:TorchSharp.Tensor.TensorExtensionMethods.ToTorchTensor``1(``0,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Array" />
      </Targets>
      <Member MemberName="ToTorchTensor&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static TorchSharp.Tensor.TorchTensor ToTorchTensor&lt;T&gt; (this T[] rawArray, long[] dimensions, bool doCopy = false, bool requiresGrad = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype TorchSharp.Tensor.TorchTensor ToTorchTensor&lt;T&gt;(!!T[] rawArray, int64[] dimensions, bool doCopy, bool requiresGrad) cil managed" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TorchSharp.Tensor.TorchTensor</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="rawArray" Type="T[]" RefType="this" />
          <Parameter Name="dimensions" Type="System.Int64[]" />
          <Parameter Name="doCopy" Type="System.Boolean" />
          <Parameter Name="requiresGrad" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="rawArray">To be added.</param>
          <param name="dimensions">To be added.</param>
          <param name="doCopy">To be added.</param>
          <param name="requiresGrad">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="TorchSharp.Tensor.TensorExtensionMethods" Member="M:TorchSharp.Tensor.TensorExtensionMethods.ToTorchTensor``1(``0[],System.Int64[],System.Boolean,System.Boolean)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
