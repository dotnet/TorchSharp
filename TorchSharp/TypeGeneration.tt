<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Runtime.InteropServices;
using Microsoft.Win32.SafeHandles;
using System.Text;

namespace TorchSharp {
<#
foreach (var type in new [] { 
    new { ApiName = "Byte", Storage = "byte", AccReal="long" }, 
    new { ApiName = "Short", Storage = "short", AccReal="long" },   
    new { ApiName = "Int", Storage = "int",  AccReal="long"},
    new { ApiName = "Long", Storage = "long", AccReal="long" },
    new { ApiName = "Double", Storage = "double", AccReal="double" },
    new { ApiName = "Float", Storage = "float", AccReal="double" },
     }){
        string tname = type.ApiName;
        string ttype = type.Storage;
        string accreal = type.AccReal;
        
        // In the future, we should add HalfFloat (16-bit float)
        bool isFloat = type.Storage == "double" || type.Storage == "float";
#>
    public partial class <#=tname#>Tensor : IDisposable {
        /// <summary>
        ///    The storage class provides a mechanism to access the underlying data representation for tensors.
        /// </summary>
        public class <#=tname#>Storage : IDisposable {
            internal sealed class HType : SafeHandle {
                public HType (IntPtr preexistingHandle, bool ownsHandle) : base (IntPtr.Zero, ownsHandle)
                {
                    SetHandle (preexistingHandle);
                }
                
                public override bool IsInvalid => handle == (IntPtr) 0;
                // This is just for marshalling
                internal HType () : base (IntPtr.Zero, true)
                {
                }
                
                [DllImport ("caffe2")]
                extern static void TH<#=tname#>Storage_free (IntPtr handle);
            
                
                protected override bool ReleaseHandle ()
                {
                    TH<#=tname#>Storage_free (handle);
                    handle = IntPtr.Zero;
                    return true;
                }
            }

            internal HType handle;
            
            [DllImport ("caffe2")]
            extern static HType TH<#=tname#>Storage_new ();
            
            /// <summary>
            ///   Initializes an empty <#=tname#>Storage instance.
            /// </summary>
            public <#=tname#>Storage ()
            {
                handle = TH<#=tname#>Storage_new ();
            }
            
            internal <#=tname#>Storage (HType fromHandle)
            {
                this.handle = fromHandle;
            }
            
            [DllImport ("caffe2")]
            extern static HType TH<#=tname#>Storage_new_withSize (IntPtr size);
            
            /// <summary>
            ///   Initializes a <#=tname#>Storage instance with the specified size.
            /// </summary>        
            /// <param name="size">The desired number of elements in the storage</param>
            public <#=tname#>Storage (long size)
            {
                handle = TH<#=tname#>Storage_new_withSize ((IntPtr) size);
            }
            
            /// <summary>
            /// Finalizer
            /// </summary>
            ~<#=tname#>Storage ()
            {
                Dispose (false);
            }
            
            /// <summary>
            ///   Releases the storage.
            /// </summary>        
            public void Dispose ()
            {
                Dispose (true);
                GC.SuppressFinalize (this);
            }
            
            /// <summary>
            ///   Implements the .NET Dispose pattern.
            /// </summary>
            protected void Dispose (bool disposing)
            {
                if (disposing){
                    handle.Dispose ();
                    handle = null;
                }
            }
            
            [DllImport ("caffe2")]
            extern static <#=ttype#> TH<#=tname#>Storage_get (HType handle, /*ptrdiff_t*/IntPtr pos);
            [DllImport ("caffe2")]
            extern static void TH<#=tname#>Storage_set (HType handle, /*ptrdiff_t*/IntPtr pos,  <#=ttype#> value);
            
            /// <summary>
            /// </summary>
            public <#=ttype#> this [long index] {
                get => TH<#=tname#>Storage_get (handle, (IntPtr) (index));
                set {
                    TH<#=tname#>Storage_set (handle, (IntPtr) (index), value);
                }
            }
            
            [DllImport ("caffe2")]
            extern static <#=ttype#> TH<#=tname#>Storage_resize (HType handle, /*ptrdiff_t*/UIntPtr newSize);
            
            /// <summary>
            ///   Changes the size of this storage to the new requested size.
            /// </summary>
            /// <param name="size">The desired new size.</param>
            public void Resize (ulong size)
            {
                TH<#=tname#>Storage_resize (handle, (UIntPtr) size);
            }

            [DllImport ("caffe2")]
            extern static void TH<#=tname#>Storage_fill (HType handle, <#=ttype#> value);
            
            /// <summary>
            ///   Fills every element of the storage with the specified value.
            /// </summary>
            /// <param name="value">Value used for each element</param>
            public void Fill (<#=ttype#> value)
            {
                TH<#=tname#>Storage_fill (handle, value);
            }
        }
    }
    
    /// <summary>
    ///   Tensor of type <#=tname#>.
    /// </summary>
    /// <remarks>
    ///   <para>
    ///     Use the default constructor to create an empty tensor, or invoke one of the
    ///     constructors with one (1D), two (2D), three (3D), or four parameters (4D) to x
    ///     create a tensor for the desired number of dimensions.
    ///   </para>
    /// </remarks>
    public partial class <#=tname#>Tensor : IDisposable {
        internal sealed class HType : SafeHandle {
            public HType (IntPtr preexistingHandle, bool ownsHandle) : base (IntPtr.Zero, ownsHandle)
            {
                SetHandle (preexistingHandle);
            }

            // This is just for marshalling
            internal HType () : base (IntPtr.Zero, true)
            {
            }
                
            public override bool IsInvalid => handle == (IntPtr) 0;

            [DllImport ("caffe2")]
            extern static void TH<#=tname#>Tensor_free (IntPtr handle);
                
            protected override bool ReleaseHandle ()
            {
                TH<#=tname#>Tensor_free (handle);
                handle = IntPtr.Zero;
                return true;
            }
        }
        internal HType handle;
        
        internal <#=tname#>Tensor (HType handle)
        {
            this.handle = handle;
        }
        
        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_new ();
        
        /// <summary>
        ///    Creates an empty tensor.
        /// </summary>
        public <#=tname#>Tensor ()
        {
            handle = TH<#=tname#>Tensor_new ();
        }

		[DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithSize1d (long size0);

        /// <summary>
        ///    Creates a 1D tensor of the specified size.
        /// </summary>    
        /// <param name="size0">Size for the first dimension.</param>
         public <#=tname#>Tensor (long size0)
        {
            handle = TH<#=tname#>Tensor_newWithSize1d (size0);
        }

        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithSize2d (long size0, long size1);
        
        /// <summary>
        ///    Creates a 2D tensor of the specified size.
        /// </summary>        
        /// <param name="size0">Size for the first dimension.</param>
        /// <param name="size1">Size for the second dimension.</param>
        public <#=tname#>Tensor (long size0, long size1)
        {
            handle = TH<#=tname#>Tensor_newWithSize2d (size0, size1);
        }

        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithSize3d (long size0, long size1, long size2);

        /// <summary>
        ///    Creates a 3D tensor of the specified size.
        /// </summary>        
        /// <param name="size0">Size for the first dimension.</param>
        /// <param name="size1">Size for the second dimension.</param>
        /// <param name="size2">Size for the third dimension.</param>
        public <#=tname#>Tensor (long size0, long size1, long size2)
        {
            handle = TH<#=tname#>Tensor_newWithSize3d (size0, size1, size2);
        }

        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithSize4d (long size0, long size1, long size2, long size3);
        
        /// <summary>
        ///    Creates a 4D tensor of the specified size.
        /// </summary>
        /// <param name="size0">Size for the first dimension.</param>
        /// <param name="size1">Size for the second dimension.</param>
        /// <param name="size2">Size for the third dimension.</param>
        /// <param name="size3">Size for the fourth dimension.</param>
        public <#=tname#>Tensor (long size0, long size1, long size2, long size3)
        {
            handle = TH<#=tname#>Tensor_newWithSize4d (size0, size1, size2, size3);
        }

        /// <summary>
        ///   Creates a 1-4D tensor of the specified size(s).
        /// </summary>    
        /// <param name="dims">Sizes for the dimensions.</param>
        public <#=tname#>Tensor (params long[] dims)
        {
            switch (dims.Length)
            {
	            case 0:
		            handle = TH<#=tname#>Tensor_new ();
                    break;
	            case 1: 
		            handle = TH<#=tname#>Tensor_newWithSize1d (dims[0]);
                    break;
	            case 2: 
		            handle = TH<#=tname#>Tensor_newWithSize2d (dims[0], dims[1]);
		            break;
	            case 3: 
		            handle = TH<#=tname#>Tensor_newWithSize3d (dims[0], dims[1], dims[2]);
		            break;
	            case 4: 
		            handle = TH<#=tname#>Tensor_newWithSize4d (dims[0], dims[1], dims[2], dims[3]);
		            break;
	            default:
		            throw new ArgumentOutOfRangeException(nameof(dims), "Maximum number of dimensions for tensor creation is 4.");
            }
        }
        
        /// <summary>
        ///  Finalizer for ~<#=tname#>Tensor
        /// </summary>
        ~<#=tname#>Tensor ()
        {
            Dispose (false);
        }
        
        /// <summary>
        ///   Releases the tensor and its associated data.
        /// </summary>        
        public void Dispose ()
        {
            Dispose (true);
            GC.SuppressFinalize (this);
        }
        
        /// <summary>
        ///   Implements the .NET Dispose pattern.
        /// </summary>
        protected void Dispose (bool disposing)
        {
            if (disposing) {
                handle.Dispose ();
                handle = null;
            }
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_zero (HType handle);
     
        /// <summary>
        ///  Fills the tensor with zeros
        /// </summary>
        public void ZeroFill ()
        {
            TH<#=tname#>Tensor_zero (handle);
        }   
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_fill (HType handle, <#=ttype#> value);
        
        /// <summary>
        ///  Fills the tensor with the specified value
        /// </summary>
        public void Fill (<#=ttype#> value)
        {
            TH<#=tname#>Tensor_fill (handle, value);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_maskedFill (HType handle1, ByteTensor.HType handle2, <#=ttype#> value);
        
        /// <summary>
        ///  Fills the tensor with the specified value at the locations indicated by the mask.
        /// </summary>
        /// <param name="mask">A byte tensor with values 0 or 1 indicating the locations where the value should be filled.</param>
        /// <param name="value">The value to write at the indicated locations.</param>
        public void MaskedFill (ByteTensor mask, <#=ttype#> value)
        {
            TH<#=tname#>Tensor_maskedFill (handle, mask.handle, value);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_maskedCopy (HType handle1, ByteTensor.HType handle2, HType src);
        
        /// <summary>
        ///  Copies elements from the source tensor to the locations indicated by the mask.
        /// </summary>
        /// <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the destination the value should be filled.</param>
        /// <param name="src">The source tensor.</param>
        /// <remarks>
        ///  There must be at least as many elements in the source tensor as there are 1s in the mask.
        /// </remarks>
        public void MaskedCopy (ByteTensor mask, <#=tname#>Tensor src)
        {
            TH<#=tname#>Tensor_maskedCopy (handle, mask.handle, src.handle);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_maskedSelect (HType handle1, HType src, ByteTensor.HType handle2);
        
        /// <summary>
        ///  Copies elements from the source tensor at the locations indicated by the mask.
        /// </summary>
        /// <param name="mask">A byte tensor with values 0 or 1 indicating the locations where in the source the value should be fetched.</param>
        /// <param name="src">The source tensor.</param>
        /// <remarks>
        ///  There will be as many elements in the tensor as there are 1s in the mask.
        ///  There must be at least as many elements in the source tensor as there are 1s in the mask.
        /// </remarks>
        public void MaskedSelect (ByteTensor mask, <#=tname#>Tensor src)
        {
            TH<#=tname#>Tensor_maskedSelect (handle, src.handle, mask.handle);
        }

        [DllImport ("caffe2")]
        extern static <#=tname#>Storage.HType TH<#=tname#>Tensor_storage (HType handle);

        /// <summary>
        ///  Returns the associated storage for this tensor
        /// </summary>
        
        public <#=tname#>Storage Storage => new <#=tname#>Storage (TH<#=tname#>Tensor_storage (handle));
        
        [DllImport ("caffe2")]
        extern static int TH<#=tname#>Tensor_nDimension (HType handle);
        
        /// <summary>
        ///  Returns the number of dimensions for this tensor
        /// </summary>
        public int Dimensions => TH<#=tname#>Tensor_nDimension (handle);
        
        [DllImport ("caffe2")]
        extern static long TH<#=tname#>Tensor_size (HType handle, int dim);
        
        /// <summary>
        ///  Retrieves the size of the specified dimension in the tensor.
        /// </summary>
        public long GetTensorDimension (int dim)
        {
            return TH<#=tname#>Tensor_size (handle, dim);
        }

        /// <summary>
        /// Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
        /// </summary>
        /// <remarks>
        ///     An array of size 0 is used for constants, an array of size 1 is used
        ///     for single-dimension arrays, where the dimension is the value of the
        ///     first element.   And so on.
        /// </remarks>
        public long [] Shape {
            get {
                    var dims = new long [Dimensions];
                    for (int i = 0; i < dims.Length; i++)
                            dims [i] = GetTensorDimension (i);

                    return dims;
            }
        }

        [DllImport ("caffe2")]
        extern static long TH<#=tname#>Tensor_stride (HType handle, int dim);
        
        /// <summary>
        ///  Retrieves the stride of the specified dimension in the tensor.
        /// </summary>
        public long GetTensorStride (int dim)
        {
            return TH<#=tname#>Tensor_stride (handle, dim);
        }
        
        [DllImport ("caffe2")]
        extern static IntPtr TH<#=tname#>Tensor_data (HType handle);
        
        /// <summary>
        ///  Returns a pointer to the unmanaged data managed by this tensor.
        /// </summary>
        public unsafe <#=ttype#> *Data => (<#=ttype#>*) TH<#=tname#>Tensor_data (handle);
        
        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newClone (HType handle);
        
        /// <summary>
        ///   Returns a deep clone of the tensor
        /// </summary>
        public <#=tname#>Tensor Clone () => new <#=tname#>Tensor (TH<#=tname#>Tensor_newClone (handle));
        
        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newSelect (HType handle, int dim, long slideIndex);
        
        /// <summary>
        ///   Returns a new Tensor which is a tensor slice at the given index in the dimension dim. 
        /// </summary>
        /// <remarks>
        ///   The returned tensor has one less dimension: the dimension dim is removed. As a result, it is not possible to select() on a 1D tensor.
        /// </remarks>
        /// <param name="dim">Dimension to select</param>
        /// <param name="slideIndex">Beginning of the tensor slice</param>
        public <#=tname#>Tensor Select (int dim, long slideIndex) => new <#=tname#>Tensor (TH<#=tname#>Tensor_newSelect (handle, dim, slideIndex));

        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newNarrow (HType handle, int dim, long firstIndex, long size);
        
        /// <summary>
        /// Returns a new Tensor which is a narrowed version of the current one: the dimension dim is narrowed from firstIndexto firstIndex+size-1.
        /// </summary>
        /// <param name="dim">The dimension to narrow</param>
        /// <param name="firstIndex">Initial index to narrow</param>
        /// <param name="size">Number of elements</param>
        public <#=tname#>Tensor Narrow (int dim, long firstIndex, long size) => new <#=tname#>Tensor (TH<#=tname#>Tensor_newNarrow (handle, dim, firstIndex, size));
                
        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newTranspose (HType handle, int dim1, int dim2);
        
        /// <summary>
        /// Returns a tensor where dimensions dim1 and dim2 have been swapped. 
        /// </summary>
        /// <param name="dim1">First dimension</param>
        /// <param name="dim2">Second dimension</param>
        public <#=tname#>Tensor Transpose (int dim1, int dim2) => new <#=tname#>Tensor (TH<#=tname#>Tensor_newTranspose (handle, dim1, dim2));
        
        [DllImport ("caffe2")]
        extern static HType TH<#=tname#>Tensor_newUnfold (HType handle, int dim1, long size, long step);
        
        /// <summary>
        ///   Returns a tensor which contains all slices of size size in the dimension dim. Step between two slices is given by step.
        /// </summary>
        /// <param name="dim"></param>
        /// <param name="size"></param>
        /// <param name="step"></param>
        public <#=tname#>Tensor Unfold (int dim, long size, long step) => new <#=tname#>Tensor (TH<#=tname#>Tensor_newUnfold (handle, dim, size, step));
        
        [DllImport("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithStorage1d(<#=tname#>Storage.HType handle, IntPtr offset, long size, long stride);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>        
        /// <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
        /// <param name="size">Size of the first dimension.</param>     
        /// <param name="stride">Stride of the first dimension.</param>          
        public <#=tname#>Tensor NewWithStorage1d(IntPtr offset, long size, long stride)
        {
            return new <#=tname#>Tensor(TH<#=tname#>Tensor_newWithStorage1d(Storage.handle, offset, size, stride));
        }

        [DllImport("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithStorage2d(<#=tname#>Storage.HType handle, IntPtr offset, long size0, long stride0, long size1, long stride1);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>        
        /// <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
        /// <param name="size0">Size of the first dimension.</param>     
        /// <param name="stride0">Stride of the first dimension.</param>
        /// <param name="size1">Size of the second dimension.</param>     
        /// <param name="stride1">Stride of the second dimension.</param>
        public <#=tname#>Tensor NewWithStorage2d(IntPtr offset, long size0, long stride0, long size1, long stride1)
        {
            return new <#=tname#>Tensor(TH<#=tname#>Tensor_newWithStorage2d(Storage.handle, offset, size0, stride0, size1, stride1));
        }

        [DllImport("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithStorage3d(<#=tname#>Storage.HType handle, IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>        
        /// <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
        /// <param name="size0">Size of the first dimension.</param>     
        /// <param name="stride0">Stride of the first dimension.</param>
        /// <param name="size1">Size of the second dimension.</param>     
        /// <param name="stride1">Stride of the second dimension.</param>
        /// <param name="size2">Size of the third dimension.</param>     
        /// <param name="stride2">Stride of the third dimension.</param>
        public <#=tname#>Tensor NewWithStorage3d(IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2)
        {
            return new <#=tname#>Tensor(TH<#=tname#>Tensor_newWithStorage3d(Storage.handle, offset, size0, stride0, size1, stride1, size2, stride2));
        }

        [DllImport("caffe2")]
        extern static HType TH<#=tname#>Tensor_newWithStorage4d(<#=tname#>Storage.HType handle, IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2, long size3, long stride3);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>        
        /// <param name="offset">Offset within the input storage the storage of the new tensor will start from.</param> 
        /// <param name="size0">Size of the first dimension.</param>     
        /// <param name="stride0">Stride of the first dimension.</param>
        /// <param name="size1">Size of the second dimension.</param>     
        /// <param name="stride1">Stride of the second dimension.</param>
        /// <param name="size2">Size of the third dimension.</param>     
        /// <param name="stride2">Stride of the third dimension.</param>
        /// <param name="size3">Size of the third dimension.</param>     
        /// <param name="stride3">Stride of the third dimension.</param>
        public <#=tname#>Tensor NewWithStorage4d(IntPtr offset, long size0, long stride0, long size1, long stride1, long size2, long stride2, long size3, long stride3)
        {
            return new <#=tname#>Tensor(TH<#=tname#>Tensor_newWithStorage4d(Storage.handle, offset, size0, stride0, size1, stride1, size2, stride2, size3, stride3));
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_squeeze (HType handle, HType src);
        
        /// <summary>
        ///   Squeeze the tensor, i.e. remove all 1-sized dimensions.   
        /// </summary>
        /// <param name="src">The source tensor which contains the data..</param>
        public void Squeeze ()
        {
            TH<#=tname#>Tensor_squeeze (handle, handle);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_squeeze1d (HType handle, HType src, int dimension);
        
        /// <summary>
        ///   Squeeze the tensor, by removing the specified dimension.   
        /// </summary>
        /// <param name="src">The source tensor which contains the data..</param>
        public void Squeeze1d (<#=tname#>Tensor src, int dimension)
        {
            TH<#=tname#>Tensor_squeeze1d (handle, src.handle, dimension);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_unsqueeze1d (HType handle, HType src, int dimension);
        
        /// <summary>
        ///   Unsqueeze the tensor, by inserting the specified dimension of size 1.   
        /// </summary>
        /// <param name="src">The source tensor which contains the data..</param>
        public void Unsqueeze1d (<#=tname#>Tensor src, int dimension)
        {
            TH<#=tname#>Tensor_unsqueeze1d (handle, src.handle, dimension);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_resize1d (HType handle, long size);
        
        /// <summary>
        ///   Resizes the tensor to be one dimensional with the specified size, the contents of the tensor after this are undetermined.
        /// </summary>
        /// <param name="size">The desired new size for the first dimension of the tensor.</param>
        public void Resize1d (long size)
        {
            TH<#=tname#>Tensor_resize1d (handle, size);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_resize2d (HType handle, long size0, long size1);
        /// <summary>
        ///   Resizes the tensor to be two dimensional with the specified size, the contents of the tensor after this are undetermined.
        /// </summary>
        /// <param name="size0">The desired new size for the first dimension of the tensor.</param>
        /// <param name="size1">The desired new size for the second dimension of the tensor.</param>
        public void Resize2d (long size0, long size1)
        {
            TH<#=tname#>Tensor_resize2d (handle, size0, size1);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_resize3d (HType handle, long size0, long size1, long size2);
        
        /// <summary>
        ///   Resizes the tensor to be three dimensional with the specified size, the contents of the tensor after this are undetermined.
        /// </summary>
        /// <param name="size0">The desired new size for the first dimension of the tensor.</param>
        /// <param name="size1">The desired new size for the second dimension of the tensor.</param>
        /// <param name="size2">The desired new size for the third dimension of the tensor.</param>
        public void Resize3d (long size0, long size1, long size2)
        {
            TH<#=tname#>Tensor_resize3d (handle, size0, size1, size2);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_resize4d (HType handle, long size0, long size1, long size2, long size4);
        /// <summary>
        ///   Resizes the tensor to be four dimensional with the specified size, the contents of the tensor after this are undetermined.
        /// </summary>
        /// <param name="size0">The desired new size for the first dimension of the tensor.</param>
        /// <param name="size1">The desired new size for the second dimension of the tensor.</param>
        /// <param name="size2">The desired new size for the third dimension of the tensor.</param>
        /// <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
        public void Resize4d (long size0, long size1, long size2, long size3)
        {
            TH<#=tname#>Tensor_resize4d (handle, size0, size1, size2, size3);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_resize5d (HType handle, long size0, long size1, long size2, long size4, long size5);

        /// <summary>
        ///   Resizes the tensor to be five dimensional with the specified size, the contents of the tensor after this are undetermined.
        /// </summary>
        /// <param name="size0">The desired new size for the first dimension of the tensor.</param>
        /// <param name="size1">The desired new size for the second dimension of the tensor.</param>
        /// <param name="size2">The desired new size for the third dimension of the tensor.</param>
        /// <param name="size3">The desired new size for the fourth dimension of the tensor.</param>
        /// <param name="size4">The desired new size for the fifth dimension of the tensor.</param>
        public void Resize5d (long size0, long size1, long size2, long size3, long size4)
        {
            TH<#=tname#>Tensor_resize5d (handle, size0, size1, size2, size3, size4);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_resizeAs (HType handle, HType src);
       
        /// <summary>
        ///   Resizes the tensor to match the dimensions of the specified src tensor, the contents of the tensor after this are undetermined.
        /// </summary>
        /// <param name="src">The source tensor whose shape will be mirrored by this tensor.</param>
        public void ResizeAs (<#=tname#>Tensor src)
        {
            TH<#=tname#>Tensor_resizeAs (handle, src.handle);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_set (HType handle, HType src);
        
        /// <summary>
        ///   The tensor will use the same storage as the provided source, so any changes to that tensor are visible on this one.   
        /// </summary>
        /// <param name="src">The source tensor which contains the data..</param>
        public void Set (<#=tname#>Tensor src)
        {
            TH<#=tname#>Tensor_set (handle, src.handle);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_set1d (HType handle, long x0, <#=ttype#> value);
        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_get1d (HType handle, long x0);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>       
        /// <param name="x0">Index to access.</param> 
        public <#=ttype#> this [long x0] {
            get => TH<#=tname#>Tensor_get1d (handle, x0);
            set => TH<#=tname#>Tensor_set1d (handle, x0, value);
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_set2d (HType handle, long x0, long x1, <#=ttype#> value);
        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_get2d (HType handle, long x0, long x1);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>    
        /// <param name="x0">Index in the first dimension to access.</param> 
        /// <param name="x1">Index in the second dimension to access.</param>     
        public <#=ttype#> this [long x0, long x1] {
            get => TH<#=tname#>Tensor_get2d (handle, x0, x1);
            set => TH<#=tname#>Tensor_set2d (handle, x0, x1, value);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_set3d (HType handle, long x0, long x1, long x2, <#=ttype#> value);
        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_get3d (HType handle, long x0, long x1, long x2);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>        
        /// <param name="x0">Index in the first dimension to access.</param> 
        /// <param name="x1">Index in the second dimension to access.</param>     
        /// <param name="x2">Index in the third dimension to access.</param>     
        public <#=ttype#> this [long x0, long x1, long x2] {
            get => TH<#=tname#>Tensor_get3d (handle, x0, x1, x2);
            set => TH<#=tname#>Tensor_set3d (handle, x0, x1, x2, value);
        }
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_set4d (HType handle, long x0, long x1, long x2, long x3, <#=ttype#> value);
        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_get4d (HType handle, long x0, long x1, long x2, long x3);

        /// <summary>
        ///   Access to element at the specified position in the tensor
        /// </summary>        
        /// <param name="x0">Index in the first dimension to access.</param> 
        /// <param name="x1">Index in the second dimension to access.</param>     
        /// <param name="x2">Index in the third dimension to access.</param>     
        /// <param name="x3">Index in the fourth dimension to access.</param>     
        public <#=ttype#> this [long x0, long x1, long x2, long x3] {
            get => TH<#=tname#>Tensor_get4d (handle, x0, x1, x2, x3);
            set => TH<#=tname#>Tensor_set4d (handle, x0, x1, x2, x3, value);
        }
        
        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_random (HType handle, IntPtr thgenerator);
        
        /// <summary>
        ///  Populates the tensor with random values from 0 to n, using the provided random source generator.
        /// </summary>
        /// <param name="source">The random generator source</param>
        /// <param name="n">The upper limit for the values to be generated</param>
        public void Random (RandomGenerator source)
        {
            if (source == null)
                throw new ArgumentNullException (nameof (source));
            TH<#=tname#>Tensor_random (handle, source.handle);
        }

        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_clampedRandom (HType handle, IntPtr thgenerator, long min, long max);
        
        /// <summary>
        ///  Populates the tensor with random values from 0 to n, using the provided random source generator.
        /// </summary>
        /// <param name="source">The random generator source</param>
        /// <param name="n">The upper limit for the values to be generated</param>
        public void ClampedRandom (RandomGenerator source, long min, long max)
        {
            if (source == null)
                throw new ArgumentNullException (nameof (source));
            TH<#=tname#>Tensor_clampedRandom (handle, source.handle, min, max);
        }

        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_cappedRandom (HType handle, IntPtr thgenerator, long max);
        
        /// <summary>
        ///  Populates the tensor with random values from 0 to n, using the provided random source generator.
        /// </summary>
        /// <param name="source">The random generator source</param>
        /// <param name="n">The upper limit for the values to be generated</param>
        public void CappedRandom (RandomGenerator source, long max)
        {
            if (source == null)
                throw new ArgumentNullException (nameof (source));
            TH<#=tname#>Tensor_cappedRandom (handle, source.handle, max);
        }

        [DllImport ("caffe2")]
        extern static <#=ttype#> TH<#=tname#>Tensor_geometric (HType handle, IntPtr thgenerator, double p);
        
        /// <summary>
        ///  Populates the tensor with random values from 0 to n, using the provided random source generator.
        /// </summary>
        /// <param name="source">The random generator source</param>
        /// <param name="n">The upper limit for the values to be generated</param>
        public void Geometric (RandomGenerator source, double p)
        {
            if (source == null)
                throw new ArgumentNullException (nameof (source));
            TH<#=tname#>Tensor_geometric (handle, source.handle, p);
        }
        
        /// <summary>
        ///  Populates the tensor with random values from 0 to n, using a newly initialized Random number geneator.
        /// </summary>
        /// <param name="n">The upper limit for the values to be generated</param>        
        public void Random (long n)
        {
            using (var r = new RandomGenerator ())
                CappedRandom (r, n);
        }

<#
        // Float-specific random distributions.
            if (isFloat) {                    
#>
#if false
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_bernoulli_<#=tname#>Tensor (HType self, IntPtr thgenerator, HType p);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void BernoulliTensor (RandomGenerator source, <#=tname#>Tensor p)
        {
            TH<#=tname#>Tensor_bernoulli_<#=tname#>Tensor(this.handle, source.handle, p.handle);
        }
#endif

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_uniform (HType self, IntPtr thgenerator, double min, double max);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void Uniform (RandomGenerator source, double min, double max)
        {
            TH<#=tname#>Tensor_uniform(this.handle, source.handle, min, max);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_exponential (HType self, IntPtr thgenerator, double lambda);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void Exponential (RandomGenerator source, double lambda)
        {
            TH<#=tname#>Tensor_exponential(this.handle, source.handle, lambda);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_cauchy (HType self, IntPtr thgenerator, double median, double sigma);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void Cauchy (RandomGenerator source, double median, double sigma)
        {
            TH<#=tname#>Tensor_cauchy(this.handle, source.handle, median, sigma);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_logNormal (HType self, IntPtr thgenerator, double mean, double stdv);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void LogNormal (RandomGenerator source, double mean, double stdv)
        {
            TH<#=tname#>Tensor_logNormal(this.handle, source.handle, mean, stdv);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_normal (HType self, IntPtr thgenerator, double mean, double stdv);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void Normal (RandomGenerator source, double mean, double stdv)
        {
            TH<#=tname#>Tensor_normal(this.handle, source.handle, mean, stdv);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_normal_means (HType self, IntPtr thgenerator, HType means, double stdv);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void NormalMeans (RandomGenerator source, <#=tname#>Tensor means, double stdv)
        {
            TH<#=tname#>Tensor_normal_means(this.handle, source.handle, means.handle, stdv);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_normal_stddevs (HType self, IntPtr thgenerator, double mean, HType stdvs);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void NormalStdvs (RandomGenerator source, double mean, <#=tname#>Tensor stdvs)
        {
            TH<#=tname#>Tensor_normal_stddevs(this.handle, source.handle, mean, stdvs.handle);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_normal_means_stddevs (HType self, IntPtr thgenerator, HType means, HType stdvs);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void NormalMeansStdvs (RandomGenerator source, <#=tname#>Tensor means, <#=tname#>Tensor stdvs)
        {
            TH<#=tname#>Tensor_normal_means_stddevs(this.handle, source.handle, means.handle, stdvs.handle);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_multinomial (HType self, IntPtr thgenerator, HType prob_dist, int n_sample, int with_replacement);

        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public void NormalMeansStdvs (RandomGenerator source, <#=tname#>Tensor prob_dist, int n_sample, int with_replacement)
        {
            TH<#=tname#>Tensor_multinomial(this.handle, source.handle, prob_dist.handle, n_sample, with_replacement);
        }
<#          } /* if */ #>
        
        /// <summary>
        ///   Returns a debuggable version of the tensor, in this case the tensor shape
        /// </summary>
        public override string ToString ()
        {
            var n = Dimensions;
            if (n == 0)
                    return "[]";

            StringBuilder sb = new StringBuilder ("[");
            for (int i = 0; i < n; i++) {
                    sb.Append (GetTensorDimension (i));
                    if (i + 1 < n)
                            sb.Append ("x");
            }
            sb.Append ("]");
            return sb.ToString ();
        }
<#
        // Idiom Op (Target, Source, Scalar)
        
            foreach (var op in new [] 
                { "Add", "Sub", "Mul", "Div", "LShift", "RShift", "Fmod", "Remainder", "Clamp", "BitAnd", "BitOr", "BitXor"}){
                
                // BitOr and BitXor not supported for floating point values, rather than
                // letting the runtime assert, do not surface the API.
                if ((op == "BitOr" || op == "BitXor") && isFloat)
                    continue;
#>                
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_<#=op.ToLower()#> (HType result, HType source, <#=ttype#> value);
        
        // Not married to xthis yet - we have a few ways of solving this, sometimes
        // we could avoid allocation, but the API is ugly.  Or we could not have side-effects
        // which can also be surprising
        
        /// <summary>
        ///   Performs the <#=op#> operation on each element of the source with the
        ///   provided scalar.   The result tensor specified as the last parameters
        ///   is resized to match the source.
        /// </summary>
        /// <remarks>
        ///    For each element in the <see paramref="source"/> performs the <#=op#> operation
        ///    with <see paramref="value"/>.   The result is stored in the <see paramref="result"/>
        ///    tensor.
        /// </remarks>
        /// <param name="source">Source tensor on which the operation will take place.</param>
        /// <param name="value">The scalar value that the operation uses.</param>
        /// <param name="result">The tensor where the result will be placed</param>
        public static void <#=op#> (<#=tname#>Tensor source, <#=ttype#> value, <#=tname#>Tensor result)
        {
            // Arguments swapped to match Func<.., TResult> 
            TH<#=tname#>Tensor_<#=op.ToLower()#> (result.handle, source.handle, value);
        }
        
        /// <summary>
        ///   Performs the <#=op#> operation on each element of the tensor with the
        ///   <see paramref="value"/> and returns a new tensor with the result.
        /// </summary>
        /// <returns>
        ///   This returns a new tensor with the same shape as the tensor this operates on.
        /// </returns>
        /// <remarks>
        ///   If you want to avoid the allocation of a new tensor, you can use the 
        ///   alternative method <see cref="M:PytorchSharp.<#=op#>(PytorchSharp.<#=tname#>Tensor, <#=tname#>, PytorchSharp.<#=tname#>)"/>.
        /// </remarks>
        public <#=tname#>Tensor <#=op#> (<#=ttype#> value)
        {
            var result = new <#=tname#>Tensor ();
            <#=op#> (this, value, result);
            return result;
        }
<#          } /* foreach */ #>

<#
        // Idiom Op (Result, T, Scalar, Source2)
        
            foreach (var op in new [] { "CAdd", "CSub" }){
            
#>                
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_<#=op.ToLower()#> (HType result, HType t, <#=ttype#> value, HType src);
        /// <summary>
        ///   Performs the <#=op#> operation on each element of the tensor with the
        ///   <see paramref="value"/> and returns a new tensor with the result.
        ///   where the result is t[idx] + value * src[idx]
        /// </summary>
        /// <returns>
        ///   This returns a new tensor with the same shape as the tensor this operates on.
        /// </returns>
        public <#=tname#>Tensor <#=op#> (<#=ttype#> value, <#=tname#>Tensor src)
        {
            if (src == null)
                throw new ArgumentNullException (nameof (src));
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_<#=op.ToLower()#> (result.handle, this.handle, value, src.handle);
            return result;
        }

<#          } /* foreach */ #>

<#
        // Idiom Op (Result)
            if (isFloat){
            foreach (var opdoc in new [] { 
                new { FloatOnly=true,  Name="Sigmoid", Doc="sigmoid" },
                new { FloatOnly=true,  Name="Log", Doc="natural logarithm" },
                new { FloatOnly=true,  Name="Lgamma", Doc="" },
                new { FloatOnly=true,  Name="Digamma", Doc="" },
                new { FloatOnly=true,  Name="Trigamma", Doc="" },
                new { FloatOnly=true,  Name="Polygamma", Doc="" },
                new { FloatOnly=true,  Name="Log10", Doc="" },
                new { FloatOnly=true,  Name="Log1p", Doc="" },
                new { FloatOnly=true,  Name="Log2", Doc="" },
                new { FloatOnly=true,  Name="Exp", Doc="" },
                new { FloatOnly=true,  Name="Expm1", Doc="" },
                new { FloatOnly=true,  Name="Cos", Doc="" },
                new { FloatOnly=true,  Name="Acos", Doc="" },
                new { FloatOnly=true,  Name="Cosh", Doc="" },
                new { FloatOnly=true,  Name="Sin", Doc="" },
                new { FloatOnly=true,  Name="Asin", Doc="" },
                new { FloatOnly=true,  Name="Sinh", Doc="" },
                new { FloatOnly=true,  Name="Tan", Doc="" },
                new { FloatOnly=true,  Name="Atan", Doc="" },
                new { FloatOnly=true,  Name="Atan2", Doc="" },
                new { FloatOnly=true,  Name="Tanh", Doc="" },
                new { FloatOnly=true,  Name="Erf", Doc="" },
                new { FloatOnly=true,  Name="Erfc", Doc="" },
                new { FloatOnly=true,  Name="Erfinv", Doc="" },
                new { FloatOnly=true,  Name="Sqrt", Doc="square root" },
                new { FloatOnly=true,  Name="Rsqrt", Doc="reciprocal of the square root" },
                new { FloatOnly=true,  Name="Ceil", Doc="values rounded up to the nearest integer" },
                new { FloatOnly=true,  Name="Floor", Doc="values rounded down to the nearest integer" },
                new { FloatOnly=true,  Name="Round", Doc="values rounded to the nearest integer" },
                new { FloatOnly=false, Name="Abs", Doc="absolute values" },
                new { FloatOnly=true,  Name="Trunc", Doc="truncated integer values" },
                new { FloatOnly=true,  Name="Frac", Doc="fractional portion" },
                new { FloatOnly=false, Name="cinv", Doc="inverse value (1/x)" },
                new { FloatOnly=false, Name="neg", Doc="inverted sign " },
                }){
                var op = opdoc.Name;
                var doc = opdoc.Doc == "" ? opdoc.Name : opdoc.Doc;
                if (opdoc.FloatOnly && !isFloat)
                    continue;
#>                
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_<#=op.ToLower()#> (HType result, HType t);
        
        /// <summary>
        ///   Returns a new tensor with the <#=op#> of the elements of <see paramref="src"/>
        /// </summary>
        /// <returns>
        ///   This returns a new tensor with the same shape as the tensor this operates on.
        /// </returns>
        public <#=tname#>Tensor <#=op#> (<#=tname#>Tensor src)
        {
            if (src == null)
                throw new ArgumentNullException (nameof (src));
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_<#=op.ToLower()#> (result.handle, this.handle);
            return result;
        }

<#          } /* foreach */ } #>

<#
        // Idiom Op (Result, T, Scalar, Source2)
            if (isFloat){
#>                
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_pow (HType result, HType x, <#=ttype#> y);

        /// <summary>
        ///   Returns a new tensor with <see paramref="this"/> raised to the power of <see paramref="y"/>.
        /// </summary>
        /// <param 
        /// <param name="y">The exponent.</param>
        public <#=tname#>Tensor Pow (<#=ttype#> y)
        {
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_pow (result.handle, this.handle, y);
            return result;
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_tpow (HType result, <#=ttype#> x, HType y);

        /// <summary>
        ///   Returns a new tensor with <see paramref="x"/> raised to the power of <see paramref="this"/>.
        /// </summary>
        /// <param 
        /// <param name="x">The base.</param>
        public <#=tname#>Tensor TPow (<#=ttype#> x)
        {
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_tpow (result.handle, x, this.handle);
            return result;
        }

<#          } /* if */ #>

        [DllImport ("caffe2")]
        extern static <#=accreal#> TH<#=tname#>Tensor_dot (HType self, HType other);
        
        /// <summary>
        ///   Returns the tensor product between this tensor and the provided one
        /// </summary>
        /// <returns>
        ///   The dot product
        /// </returns>
        public <#=accreal#> Dot (<#=tname#>Tensor src)
        {
            if (src == null)
                throw new ArgumentNullException (nameof (src));
           
            return TH<#=tname#>Tensor_dot (this.handle, src.handle);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_match (HType result, HType m1, HType m2, <#=ttype#> gain);
        
        /// <summary>
        ///   
        /// </summary>
        /// <param name="value"></param>
        /// <param name="src1"></param>
        /// <param name="src2"></param>
        /// <returns>
        ///   This returns a new tensor with the same shape as the tensor this operates on.
        /// </returns>
        public <#=tname#>Tensor Match (<#=tname#>Tensor m2, <#=ttype#> gain)
        {
            if (m2 == null)
                throw new ArgumentNullException (nameof (m2));
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_match (result.handle, this.handle, m2.handle, gain);
            return result;
        }

<#
        // Idiom Op (Result, Tensor, Tensor 
        
            foreach (var opdoc in new [] { 
                new { Name="CMul", Doc="element wise multiplication" },
                new { Name="CPow", Doc="element-wise power operation" },
                new { Name="CDiv", Doc="element-wise division " },
                new { Name="CLShift", Doc="left shift operation of each element" },
                new { Name="CFMod", Doc="element-wide remainder of the division (rounded towards zero)" },
                new { Name="CRemainder", Doc="element-wise remainder of the division (rounded to nearest)" },
                new { Name="CBitAnd", Doc="bitwise and operation of each element " },
                new { Name="CBitOr", Doc="bitwise or operation of each element " },
                new { Name="CBitXor", Doc="bitwise xor operation of each element " },
                }){
                var op = opdoc.Name;
                var doc = opdoc.Doc;
            
#>                
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_<#=op.ToLower()#> (HType result, HType t, HType src);
        
        /// <summary>
        ///   Performs an <#=op#> of the tensor with the provided 
        ///   <see paramref="src"/> tensor and returns a new tensor with the result.
        /// </summary>
        /// <returns>
        ///   This returns a new tensor with the same shape as the tensor this operates on.
        /// </returns>
        public <#=tname#>Tensor <#=op#> (<#=tname#>Tensor src)
        {
            if (src == null)
                throw new ArgumentNullException (nameof (src));
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_<#=op.ToLower()#> (result.handle, this.handle, src.handle);
            return result;
        }

<#          } /* foreach */ #>
<#
        // Idiom Op (Result, Tensor, Scalar, Tensor, Tensor)
        
            foreach (var opdoc in new [] { 
                new { Name="AddCMul", Doc="" },
                new { Name="AddCDiv", Doc="" },
                }){
                var op = opdoc.Name;
                var doc = opdoc.Doc;
            
#>                
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_<#=op.ToLower()#> (HType result, HType t, <#=ttype#> value, HType src1, HType src2);
        
        /// <summary>
        ///   Performs <#=op#> of the tensor with the provided 
        ///   <see paramref="src1"/> and <see paramref="src1"/> tensors and returns a new tensor with the result.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="src1"></param>
        /// <param name="src2"></param>
        /// <returns>
        ///   This returns a new tensor with the same shape as the tensor this operates on.
        /// </returns>
        public <#=tname#>Tensor <#=op#> (<#=ttype#> value, <#=tname#>Tensor src1, <#=tname#>Tensor src2)
        {
            if (src1 == null)
                throw new ArgumentNullException (nameof (src1));
            if (src2 == null)
                throw new ArgumentNullException (nameof (src2));
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_<#=op.ToLower()#> (result.handle, this.handle, value, src1.handle, src2.handle);
            return result;
        }

<#          } /* foreach */ #>
<#
        // Idiom Op (Result, Scalar, Tensor, Scalar, Tensor, Tensor)
        
            foreach (var opdoc in new [] { 
                new { Name="AddMV", Doc="" },
                new { Name="AddMM", Doc="" },
                new { Name="AddR", Doc="" },
                new { Name="AddBMM", Doc="" },
                new { Name="BAddBMM", Doc="" },
                }){
                var op = opdoc.Name;
                var doc = opdoc.Doc;
            
#>                
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_<#=op.ToLower()#> (HType result, <#=ttype#> beta, HType t, <#=ttype#> alpha, HType src1, HType src2);
        
        /// <summary>
        ///   Performs <#=op#> of the tensor with the provided 
        ///   <see paramref="src1"/> and <see paramref="src1"/> tensors and returns a new tensor with the result.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="src1"></param>
        /// <param name="src2"></param>
        /// <returns>
        ///   This returns a new tensor with the same shape as the tensor this operates on.
        /// </returns>
        public <#=tname#>Tensor <#=op#> (<#=ttype#> beta, <#=ttype#> alpha, <#=tname#>Tensor src1, <#=tname#>Tensor src2)
        {
            if (src1 == null)
                throw new ArgumentNullException (nameof (src1));
            if (src2 == null)
                throw new ArgumentNullException (nameof (src2));
            var result = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_<#=op.ToLower()#> (result.handle, beta, this.handle, alpha, src1.handle, src2.handle);
            return result;
        }

<#          } /* foreach */ #>
<#
        // Idiom Op (Result, Tensor, Tensor 
        
            foreach (var opdoc in new [] { 
                new { Name="MinAll", Doc="minimum value", Ret=ttype },
                new { Name="MaxAll", Doc="maximum value", Ret=ttype },
                new { Name="MedianAll", Doc="median", Ret=ttype },
                new { Name="SumAll", Doc="sum", Ret=accreal},
                new { Name="ProdAll", Doc="product", Ret=accreal },
                new { Name="MeanAll", Doc="mean", Ret=accreal },
                }){
                var op = opdoc.Name;
                var doc = opdoc.Doc;
                var ret = opdoc.Ret;
#> 
        [DllImport ("caffe2")]
        extern static <#=ret#> TH<#=tname#>Tensor_<#=op.ToLower()#> (HType result);

        /// <summary>
        ///   Returns the <#=doc#> of the elements in the tensor.
        /// </summary>
        /// <returns>
        ///   The <#=doc#> of the tensor.
        /// </returns>
        public <#=ret#> <#=op#> ()
        {
            return TH<#=tname#>Tensor_<#=op.ToLower()#> (this.handle);
        }
<#          } /* foreach */ #>

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_indexSelect (HType tensor, HType src, int dim, LongTensor.HType index);
        
        /// <summary>
        ///   Returns a new Tensor which indexes the original Tensor along dimension dim
        ///   using the entries in index.  The returned Tensor has the same number of dimensions as the 
        ///   original Tensor. The returned Tensor does not use the same storage as the original Tensor.
        /// </summary>
        /// <param name="dim">Dimension to select</param>
        /// <param name="index">Entries to extract</param>
        public <#=tname#>Tensor IndexSelect (int dim, LongTensor index)
        {
            if (index == null)
                throw new ArgumentNullException (nameof (index));
             
            var res = new <#=tname#>Tensor ();
            TH<#=tname#>Tensor_indexSelect (res.handle, handle, dim, index.handle);
            return res;
        }
        
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_indexCopy (HType tensor, int dim, LongTensor.HType index, HType src);
        
        /// <summary>
        ///   Copies the elements of tensor into the original tensor by selecting the indices in the order 
        ///   given in index. The shape of tensor must exactly match the elements indexed or an error will be thrown.
        /// </summary>
        /// <param name="dim">Dimension to select for the copy</param>
        /// <param name="index">Entries to copy</param>
        /// <param name="src">Tensor to copy the data from.</param>
        public void IndexCopy (int dim, LongTensor index, <#=tname#>Tensor src)
        {
            if (src == null)
                throw new ArgumentNullException (nameof (src));
            if (index == null)
                throw new ArgumentNullException (nameof (index));
            
            TH<#=tname#>Tensor_indexCopy (handle, dim, index.handle, src.handle);
        }

        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_copy (HType tensor, HType src);
        
        /// <summary>
        ///   Copies the elements of a tensor into the original tensor. 
        ///   The shape of the tensors must exactly match or an error will be thrown.
        /// </summary>
        /// <param name="dim">Dimension to select for the copy</param>
        /// <param name="index">Entries to copy</param>
        /// <param name="src">Tensor to copy the data from.</param>
        public void Copy (<#=tname#>Tensor src)
        {
            if (src == null)
                throw new ArgumentNullException (nameof (src));
            TH<#=tname#>Tensor_copy (this.handle, src.handle);
        }

<#
        foreach (var srcType in new string [] { "Byte", "Short", "Int", "Long", "Float", "Double" }) {
#>
        [DllImport ("caffe2")]
        extern static void TH<#=tname#>Tensor_copy<#=srcType#> (HType tensor, <#=srcType#>Tensor.HType src);
        
        /// <summary>
        ///   Copies the elements of a <#=srcType.ToLower()#> tensor into the original tensor. 
        ///   The shape of the tensors must exactly match or an error will be thrown.
        /// </summary>
        /// <param name="dim">Dimension to select for the copy</param>
        /// <param name="index">Entries to copy</param>
        /// <param name="src">Tensor to copy the data from.</param>
        public void Copy<#=srcType#> (<#=srcType#>Tensor src)
        {
            if (src == null)
                throw new ArgumentNullException (nameof (src));
            TH<#=tname#>Tensor_copy<#=srcType#> (this.handle, src.handle);
        }
<#          } /* foreach */ #>        
    }
<#
}
#>
}