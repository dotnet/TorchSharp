### YamlMime:ManagedReference
items:
- uid: TorchSharp.RandomGenerator
  id: RandomGenerator
  children:
  - TorchSharp.RandomGenerator.#ctor
  - TorchSharp.RandomGenerator.Dispose
  - TorchSharp.RandomGenerator.Dispose(System.Boolean)
  - TorchSharp.RandomGenerator.Finalize
  - TorchSharp.RandomGenerator.InitialSeed
  - TorchSharp.RandomGenerator.InitRandomSeed
  - TorchSharp.RandomGenerator.InitWithSeed(System.UInt64)
  - TorchSharp.RandomGenerator.IsValid
  - TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Single)
  - TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Double)
  - TorchSharp.RandomGenerator.NextCauchyDouble(System.Double,System.Double)
  - TorchSharp.RandomGenerator.NextDouble
  - TorchSharp.RandomGenerator.NextDouble(System.Double,System.Double)
  - TorchSharp.RandomGenerator.NextExponentialDouble(System.Double)
  - TorchSharp.RandomGenerator.NextFloat(System.Single,System.Single)
  - TorchSharp.RandomGenerator.NextGeometricDouble(System.Double,System.Double)
  - TorchSharp.RandomGenerator.NextLogNormalDouble(System.Double,System.Double)
  - TorchSharp.RandomGenerator.NextNormalDouble(System.Double,System.Double)
  - TorchSharp.RandomGenerator.NextUInt32
  - TorchSharp.RandomGenerator.NextUInt64
  langs:
  - csharp
  name: RandomGenerator
  nameWithType: RandomGenerator
  fullName: TorchSharp.RandomGenerator
  type: Class
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Random class
  remarks: >-
    Behind the scenes this is the THGenerator API and THRandom combined into
                one as THRandom are just convenience methods on top of THGenerator.
  syntax:
    content: 'public class RandomGenerator : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
- uid: TorchSharp.RandomGenerator.#ctor
  id: '#ctor'
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: RandomGenerator()
  nameWithType: RandomGenerator.RandomGenerator()
  fullName: RandomGenerator.RandomGenerator()
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Initializes a new instance of the <xref href="TorchSharp.RandomGenerator"></xref> class.
  syntax:
    content: public RandomGenerator ();
    parameters: []
  overload: TorchSharp.RandomGenerator.#ctor*
  exceptions: []
- uid: TorchSharp.RandomGenerator.Dispose
  id: Dispose
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: RandomGenerator.Dispose()
  fullName: RandomGenerator.Dispose()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Releases all resource used by the <xref href="TorchSharp.RandomGenerator"></xref> object.
  remarks: >-
    Call Dispose when you are finished using the <xref href="TorchSharp.RandomGenerator"></xref>. This
                method leaves the <xref href="TorchSharp.RandomGenerator"></xref> in an unusable state. After
                calling this method, you must release all references to the <xref href="TorchSharp.RandomGenerator"></xref>
                so the garbage collector can reclaim the memory that the <xref href="TorchSharp.RandomGenerator"></xref> was occupying.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: TorchSharp.RandomGenerator.Dispose*
  exceptions: []
- uid: TorchSharp.RandomGenerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: RandomGenerator.Dispose(Boolean)
  fullName: RandomGenerator.Dispose(Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Dispose the specified disposing.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: If set to <code>true</code> disposing.
  overload: TorchSharp.RandomGenerator.Dispose*
  exceptions: []
- uid: TorchSharp.RandomGenerator.Finalize
  id: Finalize
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: Finalize()
  nameWithType: RandomGenerator.Finalize()
  fullName: RandomGenerator.Finalize()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: >-
    Releases unmanaged resources and performs other cleanup operations before the
                <xref href="TorchSharp.RandomGenerator"></xref> is reclaimed by garbage collection.
  syntax:
    content: ~RandomGenerator ();
    parameters: []
  overload: TorchSharp.RandomGenerator.Finalize*
  exceptions: []
- uid: TorchSharp.RandomGenerator.InitialSeed
  id: InitialSeed
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: InitialSeed
  nameWithType: RandomGenerator.InitialSeed
  fullName: RandomGenerator.InitialSeed
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns the starting seed used.
  syntax:
    content: public ulong InitialSeed { get; }
    return:
      type: System.UInt64
      description: The initial seed.
  overload: TorchSharp.RandomGenerator.InitialSeed*
  exceptions: []
- uid: TorchSharp.RandomGenerator.InitRandomSeed
  id: InitRandomSeed
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: InitRandomSeed()
  nameWithType: RandomGenerator.InitRandomSeed()
  fullName: RandomGenerator.InitRandomSeed()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Initializes the random number generator from /dev/urandom or in Windows with the current time.
  syntax:
    content: public ulong InitRandomSeed ();
    parameters: []
    return:
      type: System.UInt64
      description: The random seed.
  overload: TorchSharp.RandomGenerator.InitRandomSeed*
  exceptions: []
- uid: TorchSharp.RandomGenerator.InitWithSeed(System.UInt64)
  id: InitWithSeed(System.UInt64)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: InitWithSeed(UInt64)
  nameWithType: RandomGenerator.InitWithSeed(UInt64)
  fullName: RandomGenerator.InitWithSeed(UInt64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Initializes the random number generator with the given seed.
  syntax:
    content: public void InitWithSeed (ulong seed);
    parameters:
    - id: seed
      type: System.UInt64
      description: Seed.
  overload: TorchSharp.RandomGenerator.InitWithSeed*
  exceptions: []
- uid: TorchSharp.RandomGenerator.IsValid
  id: IsValid
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: IsValid
  nameWithType: RandomGenerator.IsValid
  fullName: RandomGenerator.IsValid
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Gets a value indicating whether this <xref href="TorchSharp.RandomGenerator"></xref> is valid.
  syntax:
    content: public bool IsValid { get; }
    return:
      type: System.Boolean
      description: <code>true</code> if is valid; otherwise, <code>false</code>.
  overload: TorchSharp.RandomGenerator.IsValid*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Single)
  id: NextBernoulliDouble(System.Double,System.Single)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextBernoulliDouble(Double, Single)
  nameWithType: RandomGenerator.NextBernoulliDouble(Double, Single)
  fullName: RandomGenerator.NextBernoulliDouble(Double, Single)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns true with double probability $p$ and false with probability 1-p (p > 0).
  syntax:
    content: public float NextBernoulliDouble (double mean, float p);
    parameters:
    - id: mean
      type: System.Double
      description: To be added.
    - id: p
      type: System.Single
      description: To be added.
    return:
      type: System.Single
      description: To be added.
  overload: TorchSharp.RandomGenerator.NextBernoulliDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Double)
  id: NextBernoulliDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextBernoulliDouble(Double, Double)
  nameWithType: RandomGenerator.NextBernoulliDouble(Double, Double)
  fullName: RandomGenerator.NextBernoulliDouble(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns true with double probability $p$ and false with probability 1-p (p > 0).
  syntax:
    content: public double NextBernoulliDouble (double mean, double p);
    parameters:
    - id: mean
      type: System.Double
      description: To be added.
    - id: p
      type: System.Double
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.RandomGenerator.NextBernoulliDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextCauchyDouble(System.Double,System.Double)
  id: NextCauchyDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextCauchyDouble(Double, Double)
  nameWithType: RandomGenerator.NextCauchyDouble(Double, Double)
  fullName: RandomGenerator.NextCauchyDouble(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Returns a random number from a Cauchy distribution.
  remarks: The Cauchy density is $p(x) = sigma/(pi*(sigma^2 + (x-median)^2))$
  syntax:
    content: public double NextCauchyDouble (double median, double sigma);
    parameters:
    - id: median
      type: System.Double
      description: To be added.
    - id: sigma
      type: System.Double
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.RandomGenerator.NextCauchyDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextDouble
  id: NextDouble
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextDouble()
  nameWithType: RandomGenerator.NextDouble()
  fullName: RandomGenerator.NextDouble()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a uniform random double on [0,1).
  syntax:
    content: public double NextDouble ();
    parameters: []
    return:
      type: System.Double
      description: Generates a uniform random double on [0,1).
  overload: TorchSharp.RandomGenerator.NextDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextDouble(System.Double,System.Double)
  id: NextDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextDouble(Double, Double)
  nameWithType: RandomGenerator.NextDouble(Double, Double)
  fullName: RandomGenerator.NextDouble(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a uniform random double on [a,b).
  syntax:
    content: public double NextDouble (double a, double b);
    parameters:
    - id: a
      type: System.Double
      description: To be added.
    - id: b
      type: System.Double
      description: To be added.
    return:
      type: System.Double
      description: Generates a uniform random double on [a, b).
  overload: TorchSharp.RandomGenerator.NextDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextExponentialDouble(System.Double)
  id: NextExponentialDouble(System.Double)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextExponentialDouble(Double)
  nameWithType: RandomGenerator.NextExponentialDouble(Double)
  fullName: RandomGenerator.NextExponentialDouble(Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a random number from an exponential distribution.
  remarks: The density is $p(x) = lambda * exp(-lambda * x)$, where lambda is a positive number.
  syntax:
    content: public double NextExponentialDouble (double lambda);
    parameters:
    - id: lambda
      type: System.Double
      description: Must be a positive number
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.RandomGenerator.NextExponentialDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextFloat(System.Single,System.Single)
  id: NextFloat(System.Single,System.Single)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextFloat(Single, Single)
  nameWithType: RandomGenerator.NextFloat(Single, Single)
  fullName: RandomGenerator.NextFloat(Single, Single)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a uniform random float on [a,b).
  syntax:
    content: public double NextFloat (float a, float b);
    parameters:
    - id: a
      type: System.Single
      description: To be added.
    - id: b
      type: System.Single
      description: To be added.
    return:
      type: System.Double
      description: Generates a uniform random float on [a, b).
  overload: TorchSharp.RandomGenerator.NextFloat*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextGeometricDouble(System.Double,System.Double)
  id: NextGeometricDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextGeometricDouble(Double, Double)
  nameWithType: RandomGenerator.NextGeometricDouble(Double, Double)
  fullName: RandomGenerator.NextGeometricDouble(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a random number from a geometric distribution.
  remarks: >-
    It returns an integer i, where p(i) = (1-p) * p^(i-1).
                p must satisfy $0 < p < 1
  syntax:
    content: public double NextGeometricDouble (double mean, double p);
    parameters:
    - id: mean
      type: System.Double
      description: To be added.
    - id: p
      type: System.Double
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.RandomGenerator.NextGeometricDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextLogNormalDouble(System.Double,System.Double)
  id: NextLogNormalDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextLogNormalDouble(Double, Double)
  nameWithType: RandomGenerator.NextLogNormalDouble(Double, Double)
  fullName: RandomGenerator.NextLogNormalDouble(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a random number from a log-normal distribution.
  syntax:
    content: public double NextLogNormalDouble (double mean, double stddev);
    parameters:
    - id: mean
      type: System.Double
      description: '> 0 is the mean of the log-normal distribution'
    - id: stddev
      type: System.Double
      description: is its standard deviation.
    return:
      type: System.Double
      description: To be added.
  overload: TorchSharp.RandomGenerator.NextLogNormalDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextNormalDouble(System.Double,System.Double)
  id: NextNormalDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextNormalDouble(Double, Double)
  nameWithType: RandomGenerator.NextNormalDouble(Double, Double)
  fullName: RandomGenerator.NextNormalDouble(Double, Double)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a random number from a normal distribution.
  syntax:
    content: public double NextNormalDouble (double mean, double stdev);
    parameters:
    - id: mean
      type: System.Double
      description: Mean for the distribution
    - id: stdev
      type: System.Double
      description: Stanard deviation for the distribution, > 0
    return:
      type: System.Double
      description: Generates a number for the normal distribution.
  overload: TorchSharp.RandomGenerator.NextNormalDouble*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextUInt32
  id: NextUInt32
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextUInt32()
  nameWithType: RandomGenerator.NextUInt32()
  fullName: RandomGenerator.NextUInt32()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a uniform 32 bits integer.
  syntax:
    content: public uint NextUInt32 ();
    parameters: []
    return:
      type: System.UInt32
      description: UInt32 random value.
  overload: TorchSharp.RandomGenerator.NextUInt32*
  exceptions: []
- uid: TorchSharp.RandomGenerator.NextUInt64
  id: NextUInt64
  parent: TorchSharp.RandomGenerator
  langs:
  - csharp
  name: NextUInt64()
  nameWithType: RandomGenerator.NextUInt64()
  fullName: RandomGenerator.NextUInt64()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp
  summary: Generates a uniform 64 bits integer.
  syntax:
    content: public ulong NextUInt64 ();
    parameters: []
    return:
      type: System.UInt64
      description: UInt64 random value.
  overload: TorchSharp.RandomGenerator.NextUInt64*
  exceptions: []
references:
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TorchSharp.RandomGenerator.#ctor
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: RandomGenerator()
  nameWithType: RandomGenerator.RandomGenerator()
  fullName: RandomGenerator.RandomGenerator()
- uid: TorchSharp.RandomGenerator.Dispose
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: Dispose()
  nameWithType: RandomGenerator.Dispose()
  fullName: RandomGenerator.Dispose()
- uid: TorchSharp.RandomGenerator.Dispose(System.Boolean)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: RandomGenerator.Dispose(Boolean)
  fullName: RandomGenerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TorchSharp.RandomGenerator.Finalize
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: Finalize()
  nameWithType: RandomGenerator.Finalize()
  fullName: RandomGenerator.Finalize()
- uid: TorchSharp.RandomGenerator.InitialSeed
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: InitialSeed
  nameWithType: RandomGenerator.InitialSeed
  fullName: RandomGenerator.InitialSeed
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: TorchSharp.RandomGenerator.InitRandomSeed
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: InitRandomSeed()
  nameWithType: RandomGenerator.InitRandomSeed()
  fullName: RandomGenerator.InitRandomSeed()
- uid: TorchSharp.RandomGenerator.InitWithSeed(System.UInt64)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: InitWithSeed(UInt64)
  nameWithType: RandomGenerator.InitWithSeed(UInt64)
  fullName: RandomGenerator.InitWithSeed(UInt64)
- uid: TorchSharp.RandomGenerator.IsValid
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: IsValid
  nameWithType: RandomGenerator.IsValid
  fullName: RandomGenerator.IsValid
- uid: TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Single)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextBernoulliDouble(Double, Single)
  nameWithType: RandomGenerator.NextBernoulliDouble(Double, Single)
  fullName: RandomGenerator.NextBernoulliDouble(Double, Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: TorchSharp.RandomGenerator.NextBernoulliDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextBernoulliDouble(Double, Double)
  nameWithType: RandomGenerator.NextBernoulliDouble(Double, Double)
  fullName: RandomGenerator.NextBernoulliDouble(Double, Double)
- uid: TorchSharp.RandomGenerator.NextCauchyDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextCauchyDouble(Double, Double)
  nameWithType: RandomGenerator.NextCauchyDouble(Double, Double)
  fullName: RandomGenerator.NextCauchyDouble(Double, Double)
- uid: TorchSharp.RandomGenerator.NextDouble
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextDouble()
  nameWithType: RandomGenerator.NextDouble()
  fullName: RandomGenerator.NextDouble()
- uid: TorchSharp.RandomGenerator.NextDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextDouble(Double, Double)
  nameWithType: RandomGenerator.NextDouble(Double, Double)
  fullName: RandomGenerator.NextDouble(Double, Double)
- uid: TorchSharp.RandomGenerator.NextExponentialDouble(System.Double)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextExponentialDouble(Double)
  nameWithType: RandomGenerator.NextExponentialDouble(Double)
  fullName: RandomGenerator.NextExponentialDouble(Double)
- uid: TorchSharp.RandomGenerator.NextFloat(System.Single,System.Single)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextFloat(Single, Single)
  nameWithType: RandomGenerator.NextFloat(Single, Single)
  fullName: RandomGenerator.NextFloat(Single, Single)
- uid: TorchSharp.RandomGenerator.NextGeometricDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextGeometricDouble(Double, Double)
  nameWithType: RandomGenerator.NextGeometricDouble(Double, Double)
  fullName: RandomGenerator.NextGeometricDouble(Double, Double)
- uid: TorchSharp.RandomGenerator.NextLogNormalDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextLogNormalDouble(Double, Double)
  nameWithType: RandomGenerator.NextLogNormalDouble(Double, Double)
  fullName: RandomGenerator.NextLogNormalDouble(Double, Double)
- uid: TorchSharp.RandomGenerator.NextNormalDouble(System.Double,System.Double)
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextNormalDouble(Double, Double)
  nameWithType: RandomGenerator.NextNormalDouble(Double, Double)
  fullName: RandomGenerator.NextNormalDouble(Double, Double)
- uid: TorchSharp.RandomGenerator.NextUInt32
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextUInt32()
  nameWithType: RandomGenerator.NextUInt32()
  fullName: RandomGenerator.NextUInt32()
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: TorchSharp.RandomGenerator.NextUInt64
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextUInt64()
  nameWithType: RandomGenerator.NextUInt64()
  fullName: RandomGenerator.NextUInt64()
- uid: TorchSharp.RandomGenerator.#ctor*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: RandomGenerator
  nameWithType: RandomGenerator.RandomGenerator
  fullName: RandomGenerator.RandomGenerator
- uid: TorchSharp.RandomGenerator.Dispose*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: Dispose
  nameWithType: RandomGenerator.Dispose
  fullName: RandomGenerator.Dispose
- uid: TorchSharp.RandomGenerator.Finalize*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: Finalize
  nameWithType: RandomGenerator.Finalize
  fullName: RandomGenerator.Finalize
- uid: TorchSharp.RandomGenerator.InitialSeed*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: InitialSeed
  nameWithType: RandomGenerator.InitialSeed
  fullName: RandomGenerator.InitialSeed
- uid: TorchSharp.RandomGenerator.InitRandomSeed*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: InitRandomSeed
  nameWithType: RandomGenerator.InitRandomSeed
  fullName: RandomGenerator.InitRandomSeed
- uid: TorchSharp.RandomGenerator.InitWithSeed*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: InitWithSeed
  nameWithType: RandomGenerator.InitWithSeed
  fullName: RandomGenerator.InitWithSeed
- uid: TorchSharp.RandomGenerator.IsValid*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: IsValid
  nameWithType: RandomGenerator.IsValid
  fullName: RandomGenerator.IsValid
- uid: TorchSharp.RandomGenerator.NextBernoulliDouble*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextBernoulliDouble
  nameWithType: RandomGenerator.NextBernoulliDouble
  fullName: RandomGenerator.NextBernoulliDouble
- uid: TorchSharp.RandomGenerator.NextCauchyDouble*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextCauchyDouble
  nameWithType: RandomGenerator.NextCauchyDouble
  fullName: RandomGenerator.NextCauchyDouble
- uid: TorchSharp.RandomGenerator.NextDouble*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextDouble
  nameWithType: RandomGenerator.NextDouble
  fullName: RandomGenerator.NextDouble
- uid: TorchSharp.RandomGenerator.NextExponentialDouble*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextExponentialDouble
  nameWithType: RandomGenerator.NextExponentialDouble
  fullName: RandomGenerator.NextExponentialDouble
- uid: TorchSharp.RandomGenerator.NextFloat*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextFloat
  nameWithType: RandomGenerator.NextFloat
  fullName: RandomGenerator.NextFloat
- uid: TorchSharp.RandomGenerator.NextGeometricDouble*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextGeometricDouble
  nameWithType: RandomGenerator.NextGeometricDouble
  fullName: RandomGenerator.NextGeometricDouble
- uid: TorchSharp.RandomGenerator.NextLogNormalDouble*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextLogNormalDouble
  nameWithType: RandomGenerator.NextLogNormalDouble
  fullName: RandomGenerator.NextLogNormalDouble
- uid: TorchSharp.RandomGenerator.NextNormalDouble*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextNormalDouble
  nameWithType: RandomGenerator.NextNormalDouble
  fullName: RandomGenerator.NextNormalDouble
- uid: TorchSharp.RandomGenerator.NextUInt32*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextUInt32
  nameWithType: RandomGenerator.NextUInt32
  fullName: RandomGenerator.NextUInt32
- uid: TorchSharp.RandomGenerator.NextUInt64*
  parent: TorchSharp.RandomGenerator
  isExternal: false
  name: NextUInt64
  nameWithType: RandomGenerator.NextUInt64
  fullName: RandomGenerator.NextUInt64
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
