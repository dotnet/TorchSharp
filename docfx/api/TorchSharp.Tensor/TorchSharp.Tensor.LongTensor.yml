### YamlMime:ManagedReference
items:
- uid: TorchSharp.Tensor.LongTensor
  id: LongTensor
  children:
  - TorchSharp.Tensor.LongTensor.#ctor
  - TorchSharp.Tensor.LongTensor.Arange(System.Int64,System.Int64,System.Int64,System.String,System.Boolean)
  - TorchSharp.Tensor.LongTensor.Empty(System.Int64[],System.String,System.Boolean)
  - TorchSharp.Tensor.LongTensor.From(System.Int64,System.Boolean)
  - TorchSharp.Tensor.LongTensor.From(System.Int64[],System.Boolean)
  - TorchSharp.Tensor.LongTensor.From(System.Int64[],System.Int64[],System.Boolean)
  - TorchSharp.Tensor.LongTensor.From(System.IntPtr,System.Int64[],System.Boolean)
  - TorchSharp.Tensor.LongTensor.Ones(System.Int64[],System.String,System.Boolean)
  - TorchSharp.Tensor.LongTensor.Random(System.Int64[],System.String,System.Boolean)
  - TorchSharp.Tensor.LongTensor.RandomN(System.Int64[],System.String,System.Boolean)
  - TorchSharp.Tensor.LongTensor.Sparse(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Int64[],System.String,System.Boolean)
  - TorchSharp.Tensor.LongTensor.Zeros(System.Int64[],System.String,System.Boolean)
  langs:
  - csharp
  name: LongTensor
  nameWithType: TorchSharp.Tensor.LongTensor
  fullName: TorchSharp.Tensor.LongTensor
  type: Class
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: >-
    Tensor of type Long.

    This tensor maps to a Torch variable (see torch/csrc/autograd/variable.h).

    Please do not mix Aten Tensors and Torch Tensors.
  syntax:
    content: public class LongTensor
    content.csharp: public class LongTensor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.LongTensor.#ctor
  id: '#ctor'
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: LongTensor()
  nameWithType: LongTensor.LongTensor()
  fullName: TorchSharp.Tensor.LongTensor.LongTensor()
  type: Constructor
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public LongTensor ();
    parameters: []
    content.csharp: public LongTensor ();
  overload: TorchSharp.Tensor.LongTensor.#ctor*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.LongTensor.Arange(System.Int64,System.Int64,System.Int64,System.String,System.Boolean)
  id: Arange(System.Int64,System.Int64,System.Int64,System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: Arange(Int64, Int64, Int64, String, Boolean)
  nameWithType: LongTensor.Arange(Int64, Int64, Int64, String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Arange(Int64, Int64, Int64, String, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: >-
    Creates 1-D tensor of size [(end - start) / step] with values from interval [start, end) and

    common difference step, starting from start
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor Arange (long start, long stop, long step, string device = "cpu", bool requiresGrad = false);
    parameters:
    - id: start
      type: System.Int64
      description: ''
    - id: stop
      type: System.Int64
      description: ''
    - id: step
      type: System.Int64
      description: ''
    - id: device
      type: System.String
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor Arange (long start, long stop, long step, string device = "cpu", bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.Arange*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.Empty(System.Int64[],System.String,System.Boolean)
  id: Empty(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: Empty(Int64[], String, Boolean)
  nameWithType: LongTensor.Empty(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Empty(Int64[], String, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Create a new tensor filled with ones
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor Empty (long[] size, string device = "cpu", bool requiresGrad = false);
    parameters:
    - id: size
      type: System.Int64[]
      description: ''
    - id: device
      type: System.String
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor Empty (long[] size, string device = "cpu", bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.Empty*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.From(System.Int64,System.Boolean)
  id: From(System.Int64,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: From(Int64, Boolean)
  nameWithType: LongTensor.From(Int64, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(Int64, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor From (long scalar, bool requiresGrad = false);
    parameters:
    - id: scalar
      type: System.Int64
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor From (long scalar, bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.From*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.From(System.Int64[],System.Boolean)
  id: From(System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: From(Int64[], Boolean)
  nameWithType: LongTensor.From(Int64[], Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(Int64[], Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor From (long[] rawArray, bool requiresGrad = false);
    parameters:
    - id: rawArray
      type: System.Int64[]
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor From (long[] rawArray, bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.From*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.From(System.Int64[],System.Int64[],System.Boolean)
  id: From(System.Int64[],System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: From(Int64[], Int64[], Boolean)
  nameWithType: LongTensor.From(Int64[], Int64[], Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(Int64[], Int64[], Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor From (long[] rawArray, long[] dimensions, bool requiresGrad = false);
    parameters:
    - id: rawArray
      type: System.Int64[]
      description: ''
    - id: dimensions
      type: System.Int64[]
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor From (long[] rawArray, long[] dimensions, bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.From*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.From(System.IntPtr,System.Int64[],System.Boolean)
  id: From(System.IntPtr,System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: From(IntPtr, Int64[], Boolean)
  nameWithType: LongTensor.From(IntPtr, Int64[], Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(IntPtr, Int64[], Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor From (IntPtr rawArray, long[] dimensions, bool requiresGrad);
    parameters:
    - id: rawArray
      type: System.IntPtr
      description: ''
    - id: dimensions
      type: System.Int64[]
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor From (IntPtr rawArray, long[] dimensions, bool requiresGrad);
  overload: TorchSharp.Tensor.LongTensor.From*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.Ones(System.Int64[],System.String,System.Boolean)
  id: Ones(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: Ones(Int64[], String, Boolean)
  nameWithType: LongTensor.Ones(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Ones(Int64[], String, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Create a new tensor filled with ones
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor Ones (long[] size, string device = "cpu", bool requiresGrad = false);
    parameters:
    - id: size
      type: System.Int64[]
      description: ''
    - id: device
      type: System.String
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor Ones (long[] size, string device = "cpu", bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.Ones*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.Random(System.Int64[],System.String,System.Boolean)
  id: Random(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: Random(Int64[], String, Boolean)
  nameWithType: LongTensor.Random(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Random(Int64[], String, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Create a new tensor filled with random values taken from a uniform distribution in [0, 1).
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor Random (long[] size, string device = "cpu", bool requiresGrad = false);
    parameters:
    - id: size
      type: System.Int64[]
      description: ''
    - id: device
      type: System.String
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor Random (long[] size, string device = "cpu", bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.Random*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.RandomN(System.Int64[],System.String,System.Boolean)
  id: RandomN(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: RandomN(Int64[], String, Boolean)
  nameWithType: LongTensor.RandomN(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.RandomN(Int64[], String, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Create a new tensor filled with random values taken from a normal distribution with mean 0 and variance 1.
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor RandomN (long[] size, string device = "cpu", bool requiresGrad = false);
    parameters:
    - id: size
      type: System.Int64[]
      description: ''
    - id: device
      type: System.String
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor RandomN (long[] size, string device = "cpu", bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.RandomN*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.Sparse(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Int64[],System.String,System.Boolean)
  id: Sparse(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: Sparse(TorchTensor, TorchTensor, Int64[], String, Boolean)
  nameWithType: LongTensor.Sparse(TorchTensor, TorchTensor, Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Sparse(TorchTensor, TorchTensor, Int64[], String, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor Sparse (TorchSharp.Tensor.TorchTensor indices, TorchSharp.Tensor.TorchTensor values, long[] size, string device = "cpu", bool requiresGrad = false);
    parameters:
    - id: indices
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: values
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: size
      type: System.Int64[]
      description: ''
    - id: device
      type: System.String
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor Sparse (TorchSharp.Tensor.TorchTensor indices, TorchSharp.Tensor.TorchTensor values, long[] size, string device = "cpu", bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.Sparse*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.LongTensor.Zeros(System.Int64[],System.String,System.Boolean)
  id: Zeros(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  langs:
  - csharp
  name: Zeros(Int64[], String, Boolean)
  nameWithType: LongTensor.Zeros(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Zeros(Int64[], String, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Create a new tensor filled with zeros
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor Zeros (long[] size, string device = "cpu", bool requiresGrad = false);
    parameters:
    - id: size
      type: System.Int64[]
      description: ''
    - id: device
      type: System.String
      description: ''
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor Zeros (long[] size, string device = "cpu", bool requiresGrad = false);
  overload: TorchSharp.Tensor.LongTensor.Zeros*
  exceptions: []
  modifiers.csharp:
  - public
  - static
references:
- uid: TorchSharp.Tensor
  commentId: N:TorchSharp.Tensor
  isExternal: false
  name: TorchSharp.Tensor
  nameWithType: TorchSharp.Tensor
  fullName: TorchSharp.Tensor
  type: namespace
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TorchSharp.Tensor.LongTensor.#ctor
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: LongTensor()
  nameWithType: LongTensor.LongTensor()
  fullName: TorchSharp.Tensor.LongTensor.LongTensor()
  type: constructor
- uid: TorchSharp.Tensor.LongTensor.Arange(System.Int64,System.Int64,System.Int64,System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Arange(Int64, Int64, Int64, String, Boolean)
  nameWithType: LongTensor.Arange(Int64, Int64, Int64, String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Arange(Int64, Int64, Int64, String, Boolean)
  type: method
- uid: TorchSharp.Tensor.TorchTensor
  parent: TorchSharp.Tensor
  isExternal: false
  name: TorchTensor
  nameWithType: TorchTensor
  fullName: TorchSharp.Tensor.TorchTensor
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TorchSharp.Tensor.LongTensor.Empty(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Empty(Int64[], String, Boolean)
  nameWithType: LongTensor.Empty(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Empty(Int64[], String, Boolean)
  type: method
- uid: System.Int64[]
  parent: System
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TorchSharp.Tensor.LongTensor.From(System.Int64,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: From(Int64, Boolean)
  nameWithType: LongTensor.From(Int64, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(Int64, Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.From(System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: From(Int64[], Boolean)
  nameWithType: LongTensor.From(Int64[], Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(Int64[], Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.From(System.Int64[],System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: From(Int64[], Int64[], Boolean)
  nameWithType: LongTensor.From(Int64[], Int64[], Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(Int64[], Int64[], Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.From(System.IntPtr,System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: From(IntPtr, Int64[], Boolean)
  nameWithType: LongTensor.From(IntPtr, Int64[], Boolean)
  fullName: TorchSharp.Tensor.LongTensor.From(IntPtr, Int64[], Boolean)
  type: method
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: TorchSharp.Tensor.LongTensor.Ones(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Ones(Int64[], String, Boolean)
  nameWithType: LongTensor.Ones(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Ones(Int64[], String, Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.Random(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Random(Int64[], String, Boolean)
  nameWithType: LongTensor.Random(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Random(Int64[], String, Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.RandomN(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: RandomN(Int64[], String, Boolean)
  nameWithType: LongTensor.RandomN(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.RandomN(Int64[], String, Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.Sparse(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Sparse(TorchTensor, TorchTensor, Int64[], String, Boolean)
  nameWithType: LongTensor.Sparse(TorchTensor, TorchTensor, Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Sparse(TorchTensor, TorchTensor, Int64[], String, Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.Zeros(System.Int64[],System.String,System.Boolean)
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Zeros(Int64[], String, Boolean)
  nameWithType: LongTensor.Zeros(Int64[], String, Boolean)
  fullName: TorchSharp.Tensor.LongTensor.Zeros(Int64[], String, Boolean)
  type: method
- uid: TorchSharp.Tensor.LongTensor.#ctor*
  commentId: Overload:TorchSharp.Tensor.LongTensor.#ctor
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: LongTensor
  nameWithType: LongTensor.LongTensor
  fullName: TorchSharp.Tensor.LongTensor.LongTensor
  type: constructor
- uid: TorchSharp.Tensor.LongTensor.Arange*
  commentId: Overload:TorchSharp.Tensor.LongTensor.Arange
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Arange
  nameWithType: LongTensor.Arange
  fullName: TorchSharp.Tensor.LongTensor.Arange
  type: method
- uid: TorchSharp.Tensor.LongTensor.Empty*
  commentId: Overload:TorchSharp.Tensor.LongTensor.Empty
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Empty
  nameWithType: LongTensor.Empty
  fullName: TorchSharp.Tensor.LongTensor.Empty
  type: method
- uid: TorchSharp.Tensor.LongTensor.From*
  commentId: Overload:TorchSharp.Tensor.LongTensor.From
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: From
  nameWithType: LongTensor.From
  fullName: TorchSharp.Tensor.LongTensor.From
  type: method
- uid: TorchSharp.Tensor.LongTensor.Ones*
  commentId: Overload:TorchSharp.Tensor.LongTensor.Ones
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Ones
  nameWithType: LongTensor.Ones
  fullName: TorchSharp.Tensor.LongTensor.Ones
  type: method
- uid: TorchSharp.Tensor.LongTensor.Random*
  commentId: Overload:TorchSharp.Tensor.LongTensor.Random
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Random
  nameWithType: LongTensor.Random
  fullName: TorchSharp.Tensor.LongTensor.Random
  type: method
- uid: TorchSharp.Tensor.LongTensor.RandomN*
  commentId: Overload:TorchSharp.Tensor.LongTensor.RandomN
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: RandomN
  nameWithType: LongTensor.RandomN
  fullName: TorchSharp.Tensor.LongTensor.RandomN
  type: method
- uid: TorchSharp.Tensor.LongTensor.Sparse*
  commentId: Overload:TorchSharp.Tensor.LongTensor.Sparse
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Sparse
  nameWithType: LongTensor.Sparse
  fullName: TorchSharp.Tensor.LongTensor.Sparse
  type: method
- uid: TorchSharp.Tensor.LongTensor.Zeros*
  commentId: Overload:TorchSharp.Tensor.LongTensor.Zeros
  parent: TorchSharp.Tensor.LongTensor
  isExternal: false
  name: Zeros
  nameWithType: LongTensor.Zeros
  fullName: TorchSharp.Tensor.LongTensor.Zeros
  type: method
