### YamlMime:ManagedReference
items:
- uid: TorchSharp.Tensor.TorchTensor
  id: TorchTensor
  children:
  - TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Scalar,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Addbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  - TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Scalar,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Addmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  - TorchSharp.Tensor.TorchTensor.Argmax(System.Int64,System.Boolean)
  - TorchSharp.Tensor.TorchTensor.Backward
  - TorchSharp.Tensor.TorchTensor.Baddbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  - TorchSharp.Tensor.TorchTensor.Bmm(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Clamp(TorchSharp.Scalar,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Clone
  - TorchSharp.Tensor.TorchTensor.Contiguous
  - TorchSharp.Tensor.TorchTensor.Cpu
  - TorchSharp.Tensor.TorchTensor.Cuda
  - TorchSharp.Tensor.TorchTensor.Data``1
  - TorchSharp.Tensor.TorchTensor.DataItem``1
  - TorchSharp.Tensor.TorchTensor.Device
  - TorchSharp.Tensor.TorchTensor.Dimensions
  - TorchSharp.Tensor.TorchTensor.Dispose
  - TorchSharp.Tensor.TorchTensor.Dispose(System.Boolean)
  - TorchSharp.Tensor.TorchTensor.Div(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Div(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.DivInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.DivInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Eq(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Eq(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.EqInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.EqInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Equal(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Equals(System.Object)
  - TorchSharp.Tensor.TorchTensor.Erf
  - TorchSharp.Tensor.TorchTensor.ErfInPlace
  - TorchSharp.Tensor.TorchTensor.Exp
  - TorchSharp.Tensor.TorchTensor.Ge(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Ge(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.GeInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.GeInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.GetHashCode
  - TorchSharp.Tensor.TorchTensor.GetTensorDimension(System.Int32)
  - TorchSharp.Tensor.TorchTensor.GetTensorStride(System.Int32)
  - TorchSharp.Tensor.TorchTensor.Grad
  - TorchSharp.Tensor.TorchTensor.Gt(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Gt(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.GtInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.GtInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Handle
  - TorchSharp.Tensor.TorchTensor.IndexSelect(System.Int64,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Indices
  - TorchSharp.Tensor.TorchTensor.IsGradRequired
  - TorchSharp.Tensor.TorchTensor.IsSparse
  - TorchSharp.Tensor.TorchTensor.IsVariable
  - TorchSharp.Tensor.TorchTensor.Item
  - TorchSharp.Tensor.TorchTensor.Le(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Le(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.LeInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.LeInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Log
  - TorchSharp.Tensor.TorchTensor.LogInPlace
  - TorchSharp.Tensor.TorchTensor.Lt(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Lt(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.LtInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.LtInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.MatMul(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Max(System.Int64,System.Boolean)
  - TorchSharp.Tensor.TorchTensor.Mean
  - TorchSharp.Tensor.TorchTensor.Mm(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Mul(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Mul(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.MulInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.MulInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Ne(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Ne(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.NeInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.NeInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Norm(System.Int32,System.Boolean)
  - TorchSharp.Tensor.TorchTensor.NumberOfElements
  - TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Pow(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Remainder(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.Remainder(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.RequiresGrad(System.Boolean)
  - TorchSharp.Tensor.TorchTensor.Reshape(System.Int64[])
  - TorchSharp.Tensor.TorchTensor.Shape
  - TorchSharp.Tensor.TorchTensor.Sigmoid
  - TorchSharp.Tensor.TorchTensor.Squeeze(System.Int64)
  - TorchSharp.Tensor.TorchTensor.Strides
  - TorchSharp.Tensor.TorchTensor.Sub(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Sub(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.SubInPlace(TorchSharp.Scalar)
  - TorchSharp.Tensor.TorchTensor.SubInPlace(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.Tensor.TorchTensor.Sum
  - TorchSharp.Tensor.TorchTensor.Sum(System.Int64[],System.Boolean)
  - TorchSharp.Tensor.TorchTensor.T
  - TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64)
  - TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64,System.Int64)
  - TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64,System.Int64,System.Int64)
  - TorchSharp.Tensor.TorchTensor.ToDense
  - TorchSharp.Tensor.TorchTensor.ToString
  - TorchSharp.Tensor.TorchTensor.ToType(TorchSharp.Tensor.ATenScalarMapping)
  - TorchSharp.Tensor.TorchTensor.Transpose(System.Int64,System.Int64)
  - TorchSharp.Tensor.TorchTensor.TransposeInPlace(System.Int64,System.Int64)
  - TorchSharp.Tensor.TorchTensor.Type
  - TorchSharp.Tensor.TorchTensor.Unsqueeze(System.Int64)
  - TorchSharp.Tensor.TorchTensor.Values
  - TorchSharp.Tensor.TorchTensor.View(System.Int64[])
  langs:
  - csharp
  name: TorchTensor
  nameWithType: TorchSharp.Tensor.TorchTensor
  fullName: TorchSharp.Tensor.TorchTensor
  type: Struct
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: 'public struct TorchTensor : IDisposable'
    content.csharp: 'public struct TorchTensor : IDisposable'
  inheritance:
  - System.ValueType
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Scalar)
  id: Add(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Add(Scalar)
  nameWithType: TorchTensor.Add(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Add(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Scalar scalar);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Scalar scalar);
  overload: TorchSharp.Tensor.TorchTensor.Add*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Tensor.TorchTensor)
  id: Add(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Add(TorchTensor)
  nameWithType: TorchTensor.Add(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Add(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Add*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Scalar,TorchSharp.Scalar)
  id: Add(TorchSharp.Scalar,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Add(Scalar, Scalar)
  nameWithType: TorchTensor.Add(Scalar, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Add(Scalar, Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Scalar scalar, TorchSharp.Scalar alpha);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    - id: alpha
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Scalar scalar, TorchSharp.Scalar alpha);
  overload: TorchSharp.Tensor.TorchTensor.Add*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: Add(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Add(TorchTensor, Scalar)
  nameWithType: TorchTensor.Add(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Add(TorchTensor, Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Tensor.TorchTensor target, TorchSharp.Scalar alpha);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: alpha
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Add (TorchSharp.Tensor.TorchTensor target, TorchSharp.Scalar alpha);
  overload: TorchSharp.Tensor.TorchTensor.Add*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Addbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  id: Addbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Addbmm(TorchTensor, TorchTensor, Single, Single)
  nameWithType: TorchTensor.Addbmm(TorchTensor, TorchTensor, Single, Single)
  fullName: TorchSharp.Tensor.TorchTensor.Addbmm(TorchTensor, TorchTensor, Single, Single)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Addbmm (TorchSharp.Tensor.TorchTensor batch1, TorchSharp.Tensor.TorchTensor batch2, float beta = 1, float alpha = 1);
    parameters:
    - id: batch1
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: batch2
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: beta
      type: System.Single
      description: ''
    - id: alpha
      type: System.Single
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Addbmm (TorchSharp.Tensor.TorchTensor batch1, TorchSharp.Tensor.TorchTensor batch2, float beta = 1, float alpha = 1);
  overload: TorchSharp.Tensor.TorchTensor.Addbmm*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Scalar,TorchSharp.Scalar)
  id: AddInPlace(TorchSharp.Scalar,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: AddInPlace(Scalar, Scalar)
  nameWithType: TorchTensor.AddInPlace(Scalar, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(Scalar, Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Scalar scalar, TorchSharp.Scalar alpha);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    - id: alpha
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Scalar scalar, TorchSharp.Scalar alpha);
  overload: TorchSharp.Tensor.TorchTensor.AddInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: AddInPlace(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: AddInPlace(TorchTensor, Scalar)
  nameWithType: TorchTensor.AddInPlace(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchTensor, Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Tensor.TorchTensor target, TorchSharp.Scalar alpha);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: alpha
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Tensor.TorchTensor target, TorchSharp.Scalar alpha);
  overload: TorchSharp.Tensor.TorchTensor.AddInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Scalar)
  id: AddInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: AddInPlace(Scalar)
  nameWithType: TorchTensor.AddInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Scalar scalar);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Scalar scalar);
  overload: TorchSharp.Tensor.TorchTensor.AddInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Tensor.TorchTensor)
  id: AddInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: AddInPlace(TorchTensor)
  nameWithType: TorchTensor.AddInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor AddInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.AddInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Addmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  id: Addmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Addmm(TorchTensor, TorchTensor, Single, Single)
  nameWithType: TorchTensor.Addmm(TorchTensor, TorchTensor, Single, Single)
  fullName: TorchSharp.Tensor.TorchTensor.Addmm(TorchTensor, TorchTensor, Single, Single)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Addmm (TorchSharp.Tensor.TorchTensor mat1, TorchSharp.Tensor.TorchTensor mat2, float beta, float alpha);
    parameters:
    - id: mat1
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: mat2
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: beta
      type: System.Single
      description: ''
    - id: alpha
      type: System.Single
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Addmm (TorchSharp.Tensor.TorchTensor mat1, TorchSharp.Tensor.TorchTensor mat2, float beta, float alpha);
  overload: TorchSharp.Tensor.TorchTensor.Addmm*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Argmax(System.Int64,System.Boolean)
  id: Argmax(System.Int64,System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Argmax(Int64, Boolean)
  nameWithType: TorchTensor.Argmax(Int64, Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Argmax(Int64, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Argmax (long dimension, bool keepDim = false);
    parameters:
    - id: dimension
      type: System.Int64
      description: ''
    - id: keepDim
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Argmax (long dimension, bool keepDim = false);
  overload: TorchSharp.Tensor.TorchTensor.Argmax*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Backward
  id: Backward
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Backward()
  nameWithType: TorchTensor.Backward()
  fullName: TorchSharp.Tensor.TorchTensor.Backward()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public void Backward ();
    parameters: []
    content.csharp: public void Backward ();
  overload: TorchSharp.Tensor.TorchTensor.Backward*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Baddbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  id: Baddbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Baddbmm(TorchTensor, TorchTensor, Single, Single)
  nameWithType: TorchTensor.Baddbmm(TorchTensor, TorchTensor, Single, Single)
  fullName: TorchSharp.Tensor.TorchTensor.Baddbmm(TorchTensor, TorchTensor, Single, Single)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Baddbmm (TorchSharp.Tensor.TorchTensor batch2, TorchSharp.Tensor.TorchTensor mat, float beta = 1, float alpha = 1);
    parameters:
    - id: batch2
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: mat
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: beta
      type: System.Single
      description: ''
    - id: alpha
      type: System.Single
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Baddbmm (TorchSharp.Tensor.TorchTensor batch2, TorchSharp.Tensor.TorchTensor mat, float beta = 1, float alpha = 1);
  overload: TorchSharp.Tensor.TorchTensor.Baddbmm*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Bmm(TorchSharp.Tensor.TorchTensor)
  id: Bmm(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Bmm(TorchTensor)
  nameWithType: TorchTensor.Bmm(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Bmm(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Bmm (TorchSharp.Tensor.TorchTensor batch2);
    parameters:
    - id: batch2
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Bmm (TorchSharp.Tensor.TorchTensor batch2);
  overload: TorchSharp.Tensor.TorchTensor.Bmm*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Clamp(TorchSharp.Scalar,TorchSharp.Scalar)
  id: Clamp(TorchSharp.Scalar,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Clamp(Scalar, Scalar)
  nameWithType: TorchTensor.Clamp(Scalar, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Clamp(Scalar, Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Clamp (TorchSharp.Scalar min, TorchSharp.Scalar max);
    parameters:
    - id: min
      type: TorchSharp.Scalar
      description: ''
    - id: max
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Clamp (TorchSharp.Scalar min, TorchSharp.Scalar max);
  overload: TorchSharp.Tensor.TorchTensor.Clamp*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Clone
  id: Clone
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Clone()
  nameWithType: TorchTensor.Clone()
  fullName: TorchSharp.Tensor.TorchTensor.Clone()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Clone ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Clone ();
  overload: TorchSharp.Tensor.TorchTensor.Clone*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Contiguous
  id: Contiguous
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Contiguous()
  nameWithType: TorchTensor.Contiguous()
  fullName: TorchSharp.Tensor.TorchTensor.Contiguous()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Contiguous ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Contiguous ();
  overload: TorchSharp.Tensor.TorchTensor.Contiguous*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Cpu
  id: Cpu
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Cpu()
  nameWithType: TorchTensor.Cpu()
  fullName: TorchSharp.Tensor.TorchTensor.Cpu()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Cpu ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Cpu ();
  overload: TorchSharp.Tensor.TorchTensor.Cpu*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Cuda
  id: Cuda
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Cuda()
  nameWithType: TorchTensor.Cuda()
  fullName: TorchSharp.Tensor.TorchTensor.Cuda()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Cuda ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Cuda ();
  overload: TorchSharp.Tensor.TorchTensor.Cuda*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Data``1
  id: Data``1
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Data<T>()
  nameWithType: TorchTensor.Data<T>()
  fullName: TorchSharp.Tensor.TorchTensor.Data<T>()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Returns a pointer to the unmanaged data managed by this tensor.
  syntax:
    content: public Span<T> Data<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Span{T}
      description: ''
    content.csharp: public Span<T> Data<T> ();
  overload: TorchSharp.Tensor.TorchTensor.Data*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.DataItem``1
  id: DataItem``1
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: DataItem<T>()
  nameWithType: TorchTensor.DataItem<T>()
  fullName: TorchSharp.Tensor.TorchTensor.DataItem<T>()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public T DataItem<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: ''
    return:
      type: T
      description: ''
    content.csharp: public T DataItem<T> ();
  overload: TorchSharp.Tensor.TorchTensor.DataItem*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Device
  id: Device
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Device
  nameWithType: TorchTensor.Device
  fullName: TorchSharp.Tensor.TorchTensor.Device
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public string Device { get; }
    return:
      type: System.String
      description: ''
    content.csharp: public string Device { get; }
  overload: TorchSharp.Tensor.TorchTensor.Device*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.Dimensions
  id: Dimensions
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Dimensions
  nameWithType: TorchTensor.Dimensions
  fullName: TorchSharp.Tensor.TorchTensor.Dimensions
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Returns the number of dimensions for this tensor
  syntax:
    content: public long Dimensions { get; }
    return:
      type: System.Int64
      description: ''
    content.csharp: public long Dimensions { get; }
  overload: TorchSharp.Tensor.TorchTensor.Dimensions*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.Dispose
  id: Dispose
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Dispose()
  nameWithType: TorchTensor.Dispose()
  fullName: TorchSharp.Tensor.TorchTensor.Dispose()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Releases the tensor and its associated data.
  syntax:
    content: public void Dispose ();
    parameters: []
    content.csharp: public void Dispose ();
  overload: TorchSharp.Tensor.TorchTensor.Dispose*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: TorchTensor.Dispose(Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Dispose(Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Implements the .NET Dispose pattern.
  syntax:
    content: public void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
    content.csharp: public void Dispose (bool disposing);
  overload: TorchSharp.Tensor.TorchTensor.Dispose*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Div(TorchSharp.Tensor.TorchTensor)
  id: Div(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Div(TorchTensor)
  nameWithType: TorchTensor.Div(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Div(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Div (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Div (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Div*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Div(TorchSharp.Scalar)
  id: Div(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Div(Scalar)
  nameWithType: TorchTensor.Div(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Div(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Div (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Div (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Div*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.DivInPlace(TorchSharp.Scalar)
  id: DivInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: DivInPlace(Scalar)
  nameWithType: TorchTensor.DivInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.DivInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor DivInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor DivInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.DivInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.DivInPlace(TorchSharp.Tensor.TorchTensor)
  id: DivInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: DivInPlace(TorchTensor)
  nameWithType: TorchTensor.DivInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.DivInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor DivInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor DivInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.DivInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Eq(TorchSharp.Scalar)
  id: Eq(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Eq(Scalar)
  nameWithType: TorchTensor.Eq(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Eq(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Eq (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Eq (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Eq*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Eq(TorchSharp.Tensor.TorchTensor)
  id: Eq(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Eq(TorchTensor)
  nameWithType: TorchTensor.Eq(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Eq(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Eq (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Eq (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Eq*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.EqInPlace(TorchSharp.Scalar)
  id: EqInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: EqInPlace(Scalar)
  nameWithType: TorchTensor.EqInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.EqInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor EqInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor EqInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.EqInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.EqInPlace(TorchSharp.Tensor.TorchTensor)
  id: EqInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: EqInPlace(TorchTensor)
  nameWithType: TorchTensor.EqInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.EqInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor EqInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor EqInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.EqInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Equal(TorchSharp.Tensor.TorchTensor)
  id: Equal(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Equal(TorchTensor)
  nameWithType: TorchTensor.Equal(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Equal(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public bool Equal (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.csharp: public bool Equal (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Equal*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Equals(System.Object)
  id: Equals(System.Object)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: TorchTensor.Equals(Object)
  fullName: TorchSharp.Tensor.TorchTensor.Equals(Object)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.csharp: public override bool Equals (object obj);
  overload: TorchSharp.Tensor.TorchTensor.Equals*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Erf
  id: Erf
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Erf()
  nameWithType: TorchTensor.Erf()
  fullName: TorchSharp.Tensor.TorchTensor.Erf()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Erf ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Erf ();
  overload: TorchSharp.Tensor.TorchTensor.Erf*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.ErfInPlace
  id: ErfInPlace
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: ErfInPlace()
  nameWithType: TorchTensor.ErfInPlace()
  fullName: TorchSharp.Tensor.TorchTensor.ErfInPlace()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor ErfInPlace ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor ErfInPlace ();
  overload: TorchSharp.Tensor.TorchTensor.ErfInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Exp
  id: Exp
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Exp()
  nameWithType: TorchTensor.Exp()
  fullName: TorchSharp.Tensor.TorchTensor.Exp()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Exp ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Exp ();
  overload: TorchSharp.Tensor.TorchTensor.Exp*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Ge(TorchSharp.Scalar)
  id: Ge(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Ge(Scalar)
  nameWithType: TorchTensor.Ge(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Ge(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Ge (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Ge (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Ge*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Ge(TorchSharp.Tensor.TorchTensor)
  id: Ge(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Ge(TorchTensor)
  nameWithType: TorchTensor.Ge(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Ge(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Ge (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Ge (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Ge*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.GeInPlace(TorchSharp.Scalar)
  id: GeInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GeInPlace(Scalar)
  nameWithType: TorchTensor.GeInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GeInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor GeInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor GeInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.GeInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.GeInPlace(TorchSharp.Tensor.TorchTensor)
  id: GeInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GeInPlace(TorchTensor)
  nameWithType: TorchTensor.GeInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GeInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor GeInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor GeInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.GeInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.GetHashCode
  id: GetHashCode
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TorchTensor.GetHashCode()
  fullName: TorchSharp.Tensor.TorchTensor.GetHashCode()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: ''
    content.csharp: public override int GetHashCode ();
  overload: TorchSharp.Tensor.TorchTensor.GetHashCode*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.GetTensorDimension(System.Int32)
  id: GetTensorDimension(System.Int32)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GetTensorDimension(Int32)
  nameWithType: TorchTensor.GetTensorDimension(Int32)
  fullName: TorchSharp.Tensor.TorchTensor.GetTensorDimension(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Retrieves the size of the specified dimension in the tensor.
  syntax:
    content: public long GetTensorDimension (int dim);
    parameters:
    - id: dim
      type: System.Int32
      description: ''
    return:
      type: System.Int64
      description: ''
    content.csharp: public long GetTensorDimension (int dim);
  overload: TorchSharp.Tensor.TorchTensor.GetTensorDimension*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.GetTensorStride(System.Int32)
  id: GetTensorStride(System.Int32)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GetTensorStride(Int32)
  nameWithType: TorchTensor.GetTensorStride(Int32)
  fullName: TorchSharp.Tensor.TorchTensor.GetTensorStride(Int32)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Retrieves the stride of the specified dimension in the tensor.
  syntax:
    content: public long GetTensorStride (int dim);
    parameters:
    - id: dim
      type: System.Int32
      description: ''
    return:
      type: System.Int64
      description: ''
    content.csharp: public long GetTensorStride (int dim);
  overload: TorchSharp.Tensor.TorchTensor.GetTensorStride*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Grad
  id: Grad
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Grad()
  nameWithType: TorchTensor.Grad()
  fullName: TorchSharp.Tensor.TorchTensor.Grad()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Grad ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Grad ();
  overload: TorchSharp.Tensor.TorchTensor.Grad*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Gt(TorchSharp.Scalar)
  id: Gt(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Gt(Scalar)
  nameWithType: TorchTensor.Gt(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Gt(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Gt (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Gt (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Gt*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Gt(TorchSharp.Tensor.TorchTensor)
  id: Gt(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Gt(TorchTensor)
  nameWithType: TorchTensor.Gt(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Gt(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Gt (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Gt (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Gt*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.GtInPlace(TorchSharp.Scalar)
  id: GtInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GtInPlace(Scalar)
  nameWithType: TorchTensor.GtInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GtInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor GtInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor GtInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.GtInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.GtInPlace(TorchSharp.Tensor.TorchTensor)
  id: GtInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GtInPlace(TorchTensor)
  nameWithType: TorchTensor.GtInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GtInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor GtInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor GtInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.GtInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Handle
  id: Handle
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Handle
  nameWithType: TorchTensor.Handle
  fullName: TorchSharp.Tensor.TorchTensor.Handle
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: ''
    content.csharp: public IntPtr Handle { get; }
  overload: TorchSharp.Tensor.TorchTensor.Handle*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.IndexSelect(System.Int64,TorchSharp.Tensor.TorchTensor)
  id: IndexSelect(System.Int64,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: IndexSelect(Int64, TorchTensor)
  nameWithType: TorchTensor.IndexSelect(Int64, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.IndexSelect(Int64, TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor IndexSelect (long dimension, TorchSharp.Tensor.TorchTensor index);
    parameters:
    - id: dimension
      type: System.Int64
      description: ''
    - id: index
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor IndexSelect (long dimension, TorchSharp.Tensor.TorchTensor index);
  overload: TorchSharp.Tensor.TorchTensor.IndexSelect*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Indices
  id: Indices
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Indices
  nameWithType: TorchTensor.Indices
  fullName: TorchSharp.Tensor.TorchTensor.Indices
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Indices { get; }
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Indices { get; }
  overload: TorchSharp.Tensor.TorchTensor.Indices*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.IsGradRequired
  id: IsGradRequired
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: IsGradRequired
  nameWithType: TorchTensor.IsGradRequired
  fullName: TorchSharp.Tensor.TorchTensor.IsGradRequired
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public bool IsGradRequired { get; }
    return:
      type: System.Boolean
      description: ''
    content.csharp: public bool IsGradRequired { get; }
  overload: TorchSharp.Tensor.TorchTensor.IsGradRequired*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.IsSparse
  id: IsSparse
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: IsSparse
  nameWithType: TorchTensor.IsSparse
  fullName: TorchSharp.Tensor.TorchTensor.IsSparse
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public bool IsSparse { get; }
    return:
      type: System.Boolean
      description: ''
    content.csharp: public bool IsSparse { get; }
  overload: TorchSharp.Tensor.TorchTensor.IsSparse*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.IsVariable
  id: IsVariable
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: IsVariable
  nameWithType: TorchTensor.IsVariable
  fullName: TorchSharp.Tensor.TorchTensor.IsVariable
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public bool IsVariable { get; }
    return:
      type: System.Boolean
      description: ''
    content.csharp: public bool IsVariable { get; }
  overload: TorchSharp.Tensor.TorchTensor.IsVariable*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.Item
  id: Item
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Item()
  nameWithType: TorchTensor.Item()
  fullName: TorchSharp.Tensor.TorchTensor.Item()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Scalar Item ();
    parameters: []
    return:
      type: TorchSharp.Scalar
      description: ''
    content.csharp: public TorchSharp.Scalar Item ();
  overload: TorchSharp.Tensor.TorchTensor.Item*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Le(TorchSharp.Scalar)
  id: Le(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Le(Scalar)
  nameWithType: TorchTensor.Le(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Le(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Le (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Le (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Le*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Le(TorchSharp.Tensor.TorchTensor)
  id: Le(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Le(TorchTensor)
  nameWithType: TorchTensor.Le(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Le(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Le (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Le (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Le*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.LeInPlace(TorchSharp.Scalar)
  id: LeInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LeInPlace(Scalar)
  nameWithType: TorchTensor.LeInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LeInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor LeInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor LeInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.LeInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.LeInPlace(TorchSharp.Tensor.TorchTensor)
  id: LeInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LeInPlace(TorchTensor)
  nameWithType: TorchTensor.LeInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LeInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor LeInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor LeInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.LeInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Log
  id: Log
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Log()
  nameWithType: TorchTensor.Log()
  fullName: TorchSharp.Tensor.TorchTensor.Log()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Log ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Log ();
  overload: TorchSharp.Tensor.TorchTensor.Log*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.LogInPlace
  id: LogInPlace
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LogInPlace()
  nameWithType: TorchTensor.LogInPlace()
  fullName: TorchSharp.Tensor.TorchTensor.LogInPlace()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor LogInPlace ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor LogInPlace ();
  overload: TorchSharp.Tensor.TorchTensor.LogInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Lt(TorchSharp.Scalar)
  id: Lt(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Lt(Scalar)
  nameWithType: TorchTensor.Lt(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Lt(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Lt (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Lt (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Lt*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Lt(TorchSharp.Tensor.TorchTensor)
  id: Lt(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Lt(TorchTensor)
  nameWithType: TorchTensor.Lt(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Lt(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Lt (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Lt (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Lt*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.LtInPlace(TorchSharp.Scalar)
  id: LtInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LtInPlace(Scalar)
  nameWithType: TorchTensor.LtInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LtInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor LtInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor LtInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.LtInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.LtInPlace(TorchSharp.Tensor.TorchTensor)
  id: LtInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LtInPlace(TorchTensor)
  nameWithType: TorchTensor.LtInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LtInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor LtInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor LtInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.LtInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.MatMul(TorchSharp.Tensor.TorchTensor)
  id: MatMul(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: MatMul(TorchTensor)
  nameWithType: TorchTensor.MatMul(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.MatMul(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor MatMul (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor MatMul (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.MatMul*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Max(System.Int64,System.Boolean)
  id: Max(System.Int64,System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Max(Int64, Boolean)
  nameWithType: TorchTensor.Max(Int64, Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Max(Int64, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public ValueTuple<TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor> Max (long dimension, bool keepDim = false);
    parameters:
    - id: dimension
      type: System.Int64
      description: ''
    - id: keepDim
      type: System.Boolean
      description: ''
    return:
      type: System.ValueTuple{TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor}
      description: ''
    content.csharp: public ValueTuple<TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor> Max (long dimension, bool keepDim = false);
  overload: TorchSharp.Tensor.TorchTensor.Max*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Mean
  id: Mean
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Mean()
  nameWithType: TorchTensor.Mean()
  fullName: TorchSharp.Tensor.TorchTensor.Mean()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Mean ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Mean ();
  overload: TorchSharp.Tensor.TorchTensor.Mean*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Mm(TorchSharp.Tensor.TorchTensor)
  id: Mm(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Mm(TorchTensor)
  nameWithType: TorchTensor.Mm(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Mm(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Mm (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Mm (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Mm*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Mul(TorchSharp.Tensor.TorchTensor)
  id: Mul(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Mul(TorchTensor)
  nameWithType: TorchTensor.Mul(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Mul(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Mul (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Mul (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Mul*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Mul(TorchSharp.Scalar)
  id: Mul(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Mul(Scalar)
  nameWithType: TorchTensor.Mul(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Mul(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Mul (TorchSharp.Scalar scalar);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Mul (TorchSharp.Scalar scalar);
  overload: TorchSharp.Tensor.TorchTensor.Mul*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.MulInPlace(TorchSharp.Scalar)
  id: MulInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: MulInPlace(Scalar)
  nameWithType: TorchTensor.MulInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.MulInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor MulInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor MulInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.MulInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.MulInPlace(TorchSharp.Tensor.TorchTensor)
  id: MulInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: MulInPlace(TorchTensor)
  nameWithType: TorchTensor.MulInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.MulInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor MulInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor MulInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.MulInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Ne(TorchSharp.Scalar)
  id: Ne(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Ne(Scalar)
  nameWithType: TorchTensor.Ne(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Ne(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Ne (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Ne (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Ne*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Ne(TorchSharp.Tensor.TorchTensor)
  id: Ne(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Ne(TorchTensor)
  nameWithType: TorchTensor.Ne(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Ne(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Ne (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Ne (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Ne*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.NeInPlace(TorchSharp.Scalar)
  id: NeInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: NeInPlace(Scalar)
  nameWithType: TorchTensor.NeInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.NeInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor NeInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor NeInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.NeInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.NeInPlace(TorchSharp.Tensor.TorchTensor)
  id: NeInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: NeInPlace(TorchTensor)
  nameWithType: TorchTensor.NeInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.NeInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor NeInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor NeInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.NeInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Norm(System.Int32,System.Boolean)
  id: Norm(System.Int32,System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Norm(Int32, Boolean)
  nameWithType: TorchTensor.Norm(Int32, Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Norm(Int32, Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Norm (int dimension, bool KeepDimension = false);
    parameters:
    - id: dimension
      type: System.Int32
      description: ''
    - id: KeepDimension
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Norm (int dimension, bool KeepDimension = false);
  overload: TorchSharp.Tensor.TorchTensor.Norm*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.NumberOfElements
  id: NumberOfElements
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: NumberOfElements
  nameWithType: TorchTensor.NumberOfElements
  fullName: TorchSharp.Tensor.TorchTensor.NumberOfElements
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Returns a pointer to the unmanaged data managed by this tensor.
  syntax:
    content: public long NumberOfElements { get; }
    return:
      type: System.Int64
      description: ''
    content.csharp: public long NumberOfElements { get; }
  overload: TorchSharp.Tensor.TorchTensor.NumberOfElements*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Addition(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Addition(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Addition(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Addition (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Addition (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Addition*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_Addition(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Addition(Scalar, TorchTensor)
  nameWithType: TorchTensor.Addition(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Addition(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Addition (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Addition (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Addition*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Addition(TorchTensor, Scalar)
  nameWithType: TorchTensor.Addition(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Addition(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Addition (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Addition (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_Addition*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_Division(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Division(Scalar, TorchTensor)
  nameWithType: TorchTensor.Division(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Division(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Division (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Division (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Division*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Division(TorchTensor, Scalar)
  nameWithType: TorchTensor.Division(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Division(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Division (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Division (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_Division*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Division(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Division(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Division(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Division (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Division (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Division*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Equality(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Equality(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Equality(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Equality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Equality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Equality*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_Equality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Equality(Scalar, TorchTensor)
  nameWithType: TorchTensor.Equality(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Equality(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Equality (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Equality (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Equality*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Equality(TorchTensor, Scalar)
  nameWithType: TorchTensor.Equality(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Equality(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Equality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Equality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_Equality*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GreaterThan(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.GreaterThan(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThan(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_GreaterThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_GreaterThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_GreaterThan*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_GreaterThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GreaterThan(Scalar, TorchTensor)
  nameWithType: TorchTensor.GreaterThan(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThan(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_GreaterThan (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_GreaterThan (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_GreaterThan*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GreaterThan(TorchTensor, Scalar)
  nameWithType: TorchTensor.GreaterThan(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThan(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_GreaterThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_GreaterThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_GreaterThan*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_GreaterThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GreaterThanOrEqual(Scalar, TorchTensor)
  nameWithType: TorchTensor.GreaterThanOrEqual(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThanOrEqual(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_GreaterThanOrEqual (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_GreaterThanOrEqual (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GreaterThanOrEqual(TorchTensor, Scalar)
  nameWithType: TorchTensor.GreaterThanOrEqual(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThanOrEqual(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_GreaterThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_GreaterThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: GreaterThanOrEqual(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.GreaterThanOrEqual(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThanOrEqual(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_GreaterThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_GreaterThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_Inequality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Inequality(Scalar, TorchTensor)
  nameWithType: TorchTensor.Inequality(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Inequality(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Inequality (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Inequality (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Inequality*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Inequality(TorchTensor, Scalar)
  nameWithType: TorchTensor.Inequality(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Inequality(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Inequality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Inequality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_Inequality*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Inequality(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Inequality(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Inequality(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Inequality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Inequality (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Inequality*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LessThan(TorchTensor, Scalar)
  nameWithType: TorchTensor.LessThan(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LessThan(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_LessThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_LessThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_LessThan*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_LessThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LessThan(Scalar, TorchTensor)
  nameWithType: TorchTensor.LessThan(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThan(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_LessThan (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_LessThan (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_LessThan*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LessThan(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.LessThan(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThan(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_LessThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_LessThan (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_LessThan*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_LessThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LessThanOrEqual(Scalar, TorchTensor)
  nameWithType: TorchTensor.LessThanOrEqual(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThanOrEqual(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_LessThanOrEqual (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_LessThanOrEqual (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LessThanOrEqual(TorchTensor, Scalar)
  nameWithType: TorchTensor.LessThanOrEqual(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LessThanOrEqual(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_LessThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_LessThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: LessThanOrEqual(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.LessThanOrEqual(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThanOrEqual(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_LessThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_LessThanOrEqual (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Modulus(TorchTensor, Scalar)
  nameWithType: TorchTensor.Modulus(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Modulus(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Modulus (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Modulus (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_Modulus*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Modulus(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Modulus(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Modulus(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Modulus (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Modulus (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Modulus*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_Modulus(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Modulus(Scalar, TorchTensor)
  nameWithType: TorchTensor.Modulus(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Modulus(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Modulus (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Modulus (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Modulus*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Multiply(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Multiply(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Multiply(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Multiply (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Multiply (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Multiply*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_Multiply(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Multiply(Scalar, TorchTensor)
  nameWithType: TorchTensor.Multiply(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Multiply(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Multiply (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Multiply (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Multiply*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Multiply(TorchTensor, Scalar)
  nameWithType: TorchTensor.Multiply(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Multiply(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Multiply (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Multiply (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_Multiply*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  id: op_Subtraction(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Subtraction(Scalar, TorchTensor)
  nameWithType: TorchTensor.Subtraction(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Subtraction(Scalar, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Subtraction (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Scalar
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Subtraction (TorchSharp.Scalar left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Subtraction*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  id: op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Subtraction(TorchTensor, Scalar)
  nameWithType: TorchTensor.Subtraction(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Subtraction(TorchTensor, Scalar)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Subtraction (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Subtraction (TorchSharp.Tensor.TorchTensor left, TorchSharp.Scalar right);
  overload: TorchSharp.Tensor.TorchTensor.op_Subtraction*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  id: op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Subtraction(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Subtraction(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Subtraction(TorchTensor, TorchTensor)
  type: Operator
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public static TorchSharp.Tensor.TorchTensor op_Subtraction (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
    parameters:
    - id: left
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    - id: right
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public static TorchSharp.Tensor.TorchTensor op_Subtraction (TorchSharp.Tensor.TorchTensor left, TorchSharp.Tensor.TorchTensor right);
  overload: TorchSharp.Tensor.TorchTensor.op_Subtraction*
  exceptions: []
  modifiers.csharp:
  - public
  - static
- uid: TorchSharp.Tensor.TorchTensor.Pow(TorchSharp.Scalar)
  id: Pow(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Pow(Scalar)
  nameWithType: TorchTensor.Pow(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Pow(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Pow (TorchSharp.Scalar scalar);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Pow (TorchSharp.Scalar scalar);
  overload: TorchSharp.Tensor.TorchTensor.Pow*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Remainder(TorchSharp.Scalar)
  id: Remainder(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Remainder(Scalar)
  nameWithType: TorchTensor.Remainder(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Remainder(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Remainder (TorchSharp.Scalar scalar);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Remainder (TorchSharp.Scalar scalar);
  overload: TorchSharp.Tensor.TorchTensor.Remainder*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Remainder(TorchSharp.Tensor.TorchTensor)
  id: Remainder(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Remainder(TorchTensor)
  nameWithType: TorchTensor.Remainder(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Remainder(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Remainder (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Remainder (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Remainder*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchSharp.Scalar)
  id: RemainderInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: RemainderInPlace(Scalar)
  nameWithType: TorchTensor.RemainderInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.RemainderInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor RemainderInPlace (TorchSharp.Scalar scalar);
    parameters:
    - id: scalar
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor RemainderInPlace (TorchSharp.Scalar scalar);
  overload: TorchSharp.Tensor.TorchTensor.RemainderInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchSharp.Tensor.TorchTensor)
  id: RemainderInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: RemainderInPlace(TorchTensor)
  nameWithType: TorchTensor.RemainderInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor RemainderInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor RemainderInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.RemainderInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.RequiresGrad(System.Boolean)
  id: RequiresGrad(System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: RequiresGrad(Boolean)
  nameWithType: TorchTensor.RequiresGrad(Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.RequiresGrad(Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor RequiresGrad (bool requiresGrad);
    parameters:
    - id: requiresGrad
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor RequiresGrad (bool requiresGrad);
  overload: TorchSharp.Tensor.TorchTensor.RequiresGrad*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Reshape(System.Int64[])
  id: Reshape(System.Int64[])
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Reshape(Int64[])
  nameWithType: TorchTensor.Reshape(Int64[])
  fullName: TorchSharp.Tensor.TorchTensor.Reshape(Int64[])
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Reshape (long[] shape);
    parameters:
    - id: shape
      type: System.Int64[]
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Reshape (long[] shape);
  overload: TorchSharp.Tensor.TorchTensor.Reshape*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Shape
  id: Shape
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Shape
  nameWithType: TorchTensor.Shape
  fullName: TorchSharp.Tensor.TorchTensor.Shape
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Returns the tensor shape, this is an array whose size determines the number of dimensions on the tensor, and each element is the size of the dimension
  remarks: >-
    An array of size 0 is used for constants, an array of size 1 is used


    for single-dimension arrays, where the dimension is the value of the


    first element.   And so on.
  syntax:
    content: public long[] Shape { get; }
    return:
      type: System.Int64[]
      description: ''
    content.csharp: public long[] Shape { get; }
  overload: TorchSharp.Tensor.TorchTensor.Shape*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.Sigmoid
  id: Sigmoid
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Sigmoid()
  nameWithType: TorchTensor.Sigmoid()
  fullName: TorchSharp.Tensor.TorchTensor.Sigmoid()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Sigmoid ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Sigmoid ();
  overload: TorchSharp.Tensor.TorchTensor.Sigmoid*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Squeeze(System.Int64)
  id: Squeeze(System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Squeeze(Int64)
  nameWithType: TorchTensor.Squeeze(Int64)
  fullName: TorchSharp.Tensor.TorchTensor.Squeeze(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Squeeze (long dimension);
    parameters:
    - id: dimension
      type: System.Int64
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Squeeze (long dimension);
  overload: TorchSharp.Tensor.TorchTensor.Squeeze*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Strides
  id: Strides
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Strides
  nameWithType: TorchTensor.Strides
  fullName: TorchSharp.Tensor.TorchTensor.Strides
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Retrieves the strides for the tensor.
  syntax:
    content: public Span<long> Strides { get; }
    return:
      type: System.Span{System.Int64}
      description: ''
    content.csharp: public Span<long> Strides { get; }
  overload: TorchSharp.Tensor.TorchTensor.Strides*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.Sub(TorchSharp.Tensor.TorchTensor)
  id: Sub(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Sub(TorchTensor)
  nameWithType: TorchTensor.Sub(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Sub(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Sub (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Sub (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.Sub*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Sub(TorchSharp.Scalar)
  id: Sub(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Sub(Scalar)
  nameWithType: TorchTensor.Sub(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Sub(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Sub (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Sub (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.Sub*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.SubInPlace(TorchSharp.Scalar)
  id: SubInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: SubInPlace(Scalar)
  nameWithType: TorchTensor.SubInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.SubInPlace(Scalar)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor SubInPlace (TorchSharp.Scalar target);
    parameters:
    - id: target
      type: TorchSharp.Scalar
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor SubInPlace (TorchSharp.Scalar target);
  overload: TorchSharp.Tensor.TorchTensor.SubInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.SubInPlace(TorchSharp.Tensor.TorchTensor)
  id: SubInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: SubInPlace(TorchTensor)
  nameWithType: TorchTensor.SubInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.SubInPlace(TorchTensor)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor SubInPlace (TorchSharp.Tensor.TorchTensor target);
    parameters:
    - id: target
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor SubInPlace (TorchSharp.Tensor.TorchTensor target);
  overload: TorchSharp.Tensor.TorchTensor.SubInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Sum
  id: Sum
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Sum()
  nameWithType: TorchTensor.Sum()
  fullName: TorchSharp.Tensor.TorchTensor.Sum()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Sum ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Sum ();
  overload: TorchSharp.Tensor.TorchTensor.Sum*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Sum(System.Int64[],System.Boolean)
  id: Sum(System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Sum(Int64[], Boolean)
  nameWithType: TorchTensor.Sum(Int64[], Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Sum(Int64[], Boolean)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Sum (long[] dimensions, bool keepDimension = false);
    parameters:
    - id: dimensions
      type: System.Int64[]
      description: ''
    - id: keepDimension
      type: System.Boolean
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Sum (long[] dimensions, bool keepDimension = false);
  overload: TorchSharp.Tensor.TorchTensor.Sum*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.T
  id: T
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: T()
  nameWithType: TorchTensor.T()
  fullName: TorchSharp.Tensor.TorchTensor.T()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor T ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor T ();
  overload: TorchSharp.Tensor.TorchTensor.T*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64)
  id: TensorItems(System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: TensorItems[Int64]
  nameWithType: TorchTensor.TensorItems[Int64]
  fullName: TorchSharp.Tensor.TorchTensor.TensorItems[Int64]
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor this[long i1] { get; set; }
    parameters:
    - id: i1
      type: System.Int64
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor this[long i1] { get; set; }
  overload: TorchSharp.Tensor.TorchTensor.TensorItems*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  - set
- uid: TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64,System.Int64)
  id: TensorItems(System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: TensorItems[Int64, Int64]
  nameWithType: TorchTensor.TensorItems[Int64, Int64]
  fullName: TorchSharp.Tensor.TorchTensor.TensorItems[Int64, Int64]
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor this[long i1, long i2] { get; set; }
    parameters:
    - id: i1
      type: System.Int64
      description: ''
    - id: i2
      type: System.Int64
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor this[long i1, long i2] { get; set; }
  overload: TorchSharp.Tensor.TorchTensor.TensorItems*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  - set
- uid: TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64,System.Int64,System.Int64)
  id: TensorItems(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: TensorItems[Int64, Int64, Int64]
  nameWithType: TorchTensor.TensorItems[Int64, Int64, Int64]
  fullName: TorchSharp.Tensor.TorchTensor.TensorItems[Int64, Int64, Int64]
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor this[long i1, long i2, long i3] { get; set; }
    parameters:
    - id: i1
      type: System.Int64
      description: ''
    - id: i2
      type: System.Int64
      description: ''
    - id: i3
      type: System.Int64
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor this[long i1, long i2, long i3] { get; set; }
  overload: TorchSharp.Tensor.TorchTensor.TensorItems*
  exceptions: []
  modifiers.csharp:
  - public
  - get
  - set
- uid: TorchSharp.Tensor.TorchTensor.ToDense
  id: ToDense
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: ToDense()
  nameWithType: TorchTensor.ToDense()
  fullName: TorchSharp.Tensor.TorchTensor.ToDense()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor ToDense ();
    parameters: []
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor ToDense ();
  overload: TorchSharp.Tensor.TorchTensor.ToDense*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.ToString
  id: ToString
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: ToString()
  nameWithType: TorchTensor.ToString()
  fullName: TorchSharp.Tensor.TorchTensor.ToString()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  summary: Get a string representation of the tensor.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: ''
    content.csharp: public override string ToString ();
  overload: TorchSharp.Tensor.TorchTensor.ToString*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.ToType(TorchSharp.Tensor.ATenScalarMapping)
  id: ToType(TorchSharp.Tensor.ATenScalarMapping)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: ToType(ATenScalarMapping)
  nameWithType: TorchTensor.ToType(ATenScalarMapping)
  fullName: TorchSharp.Tensor.TorchTensor.ToType(ATenScalarMapping)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor ToType (TorchSharp.Tensor.ATenScalarMapping type);
    parameters:
    - id: type
      type: TorchSharp.Tensor.ATenScalarMapping
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor ToType (TorchSharp.Tensor.ATenScalarMapping type);
  overload: TorchSharp.Tensor.TorchTensor.ToType*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Transpose(System.Int64,System.Int64)
  id: Transpose(System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Transpose(Int64, Int64)
  nameWithType: TorchTensor.Transpose(Int64, Int64)
  fullName: TorchSharp.Tensor.TorchTensor.Transpose(Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Transpose (long dimension1, long dimension2);
    parameters:
    - id: dimension1
      type: System.Int64
      description: ''
    - id: dimension2
      type: System.Int64
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Transpose (long dimension1, long dimension2);
  overload: TorchSharp.Tensor.TorchTensor.Transpose*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.TransposeInPlace(System.Int64,System.Int64)
  id: TransposeInPlace(System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: TransposeInPlace(Int64, Int64)
  nameWithType: TorchTensor.TransposeInPlace(Int64, Int64)
  fullName: TorchSharp.Tensor.TorchTensor.TransposeInPlace(Int64, Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public void TransposeInPlace (long dimension1, long dimension2);
    parameters:
    - id: dimension1
      type: System.Int64
      description: ''
    - id: dimension2
      type: System.Int64
      description: ''
    content.csharp: public void TransposeInPlace (long dimension1, long dimension2);
  overload: TorchSharp.Tensor.TorchTensor.TransposeInPlace*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Type
  id: Type
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Type
  nameWithType: TorchTensor.Type
  fullName: TorchSharp.Tensor.TorchTensor.Type
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.ATenScalarMapping Type { get; }
    return:
      type: TorchSharp.Tensor.ATenScalarMapping
      description: ''
    content.csharp: public TorchSharp.Tensor.ATenScalarMapping Type { get; }
  overload: TorchSharp.Tensor.TorchTensor.Type*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.Unsqueeze(System.Int64)
  id: Unsqueeze(System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Unsqueeze(Int64)
  nameWithType: TorchTensor.Unsqueeze(Int64)
  fullName: TorchSharp.Tensor.TorchTensor.Unsqueeze(Int64)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Unsqueeze (long dimension);
    parameters:
    - id: dimension
      type: System.Int64
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Unsqueeze (long dimension);
  overload: TorchSharp.Tensor.TorchTensor.Unsqueeze*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.Tensor.TorchTensor.Values
  id: Values
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: Values
  nameWithType: TorchTensor.Values
  fullName: TorchSharp.Tensor.TorchTensor.Values
  type: Property
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor Values { get; }
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor Values { get; }
  overload: TorchSharp.Tensor.TorchTensor.Values*
  exceptions: []
  modifiers.csharp:
  - public
  - get
- uid: TorchSharp.Tensor.TorchTensor.View(System.Int64[])
  id: View(System.Int64[])
  parent: TorchSharp.Tensor.TorchTensor
  langs:
  - csharp
  name: View(Int64[])
  nameWithType: TorchTensor.View(Int64[])
  fullName: TorchSharp.Tensor.TorchTensor.View(Int64[])
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.Tensor
  syntax:
    content: public TorchSharp.Tensor.TorchTensor View (long[] shape);
    parameters:
    - id: shape
      type: System.Int64[]
      description: ''
    return:
      type: TorchSharp.Tensor.TorchTensor
      description: ''
    content.csharp: public TorchSharp.Tensor.TorchTensor View (long[] shape);
  overload: TorchSharp.Tensor.TorchTensor.View*
  exceptions: []
  modifiers.csharp:
  - public
references:
- uid: TorchSharp.Tensor
  commentId: N:TorchSharp.Tensor
  isExternal: false
  name: TorchSharp.Tensor
  nameWithType: TorchSharp.Tensor
  fullName: TorchSharp.Tensor
  type: namespace
- uid: System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Add(Scalar)
  nameWithType: TorchTensor.Add(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Add(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor
  parent: TorchSharp.Tensor
  isExternal: false
  name: TorchTensor
  nameWithType: TorchTensor
  fullName: TorchSharp.Tensor.TorchTensor
- uid: TorchSharp.Scalar
  parent: TorchSharp
  isExternal: false
  name: Scalar
  nameWithType: Scalar
  fullName: TorchSharp.Scalar
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Add(TorchTensor)
  nameWithType: TorchTensor.Add(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Add(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Scalar,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Add(Scalar, Scalar)
  nameWithType: TorchTensor.Add(Scalar, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Add(Scalar, Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Add(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Add(TorchTensor, Scalar)
  nameWithType: TorchTensor.Add(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Add(TorchTensor, Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Addbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addbmm(TorchTensor, TorchTensor, Single, Single)
  nameWithType: TorchTensor.Addbmm(TorchTensor, TorchTensor, Single, Single)
  fullName: TorchSharp.Tensor.TorchTensor.Addbmm(TorchTensor, TorchTensor, Single, Single)
  type: method
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Scalar,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: AddInPlace(Scalar, Scalar)
  nameWithType: TorchTensor.AddInPlace(Scalar, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(Scalar, Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: AddInPlace(TorchTensor, Scalar)
  nameWithType: TorchTensor.AddInPlace(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchTensor, Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: AddInPlace(Scalar)
  nameWithType: TorchTensor.AddInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: AddInPlace(TorchTensor)
  nameWithType: TorchTensor.AddInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Addmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addmm(TorchTensor, TorchTensor, Single, Single)
  nameWithType: TorchTensor.Addmm(TorchTensor, TorchTensor, Single, Single)
  fullName: TorchSharp.Tensor.TorchTensor.Addmm(TorchTensor, TorchTensor, Single, Single)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Argmax(System.Int64,System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Argmax(Int64, Boolean)
  nameWithType: TorchTensor.Argmax(Int64, Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Argmax(Int64, Boolean)
  type: method
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TorchSharp.Tensor.TorchTensor.Backward
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Backward()
  nameWithType: TorchTensor.Backward()
  fullName: TorchSharp.Tensor.TorchTensor.Backward()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Baddbmm(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor,System.Single,System.Single)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Baddbmm(TorchTensor, TorchTensor, Single, Single)
  nameWithType: TorchTensor.Baddbmm(TorchTensor, TorchTensor, Single, Single)
  fullName: TorchSharp.Tensor.TorchTensor.Baddbmm(TorchTensor, TorchTensor, Single, Single)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Bmm(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Bmm(TorchTensor)
  nameWithType: TorchTensor.Bmm(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Bmm(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Clamp(TorchSharp.Scalar,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Clamp(Scalar, Scalar)
  nameWithType: TorchTensor.Clamp(Scalar, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Clamp(Scalar, Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Clone
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Clone()
  nameWithType: TorchTensor.Clone()
  fullName: TorchSharp.Tensor.TorchTensor.Clone()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Contiguous
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Contiguous()
  nameWithType: TorchTensor.Contiguous()
  fullName: TorchSharp.Tensor.TorchTensor.Contiguous()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Cpu
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Cpu()
  nameWithType: TorchTensor.Cpu()
  fullName: TorchSharp.Tensor.TorchTensor.Cpu()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Cuda
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Cuda()
  nameWithType: TorchTensor.Cuda()
  fullName: TorchSharp.Tensor.TorchTensor.Cuda()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Data``1
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Data<T>()
  nameWithType: TorchTensor.Data<T>()
  fullName: TorchSharp.Tensor.TorchTensor.Data<T>()
  type: method
- uid: System.Span`1
  isExternal: true
  name: Span
  nameWithType: Span
  fullName: System.Span
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Span{T}
  parent: System
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.Tensor.TorchTensor.DataItem``1
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: DataItem<T>()
  nameWithType: TorchTensor.DataItem<T>()
  fullName: TorchSharp.Tensor.TorchTensor.DataItem<T>()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Device
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Device
  nameWithType: TorchTensor.Device
  fullName: TorchSharp.Tensor.TorchTensor.Device
  type: property
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TorchSharp.Tensor.TorchTensor.Dimensions
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Dimensions
  nameWithType: TorchTensor.Dimensions
  fullName: TorchSharp.Tensor.TorchTensor.Dimensions
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Dispose
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Dispose()
  nameWithType: TorchTensor.Dispose()
  fullName: TorchSharp.Tensor.TorchTensor.Dispose()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Dispose(System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: TorchTensor.Dispose(Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Dispose(Boolean)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Div(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Div(TorchTensor)
  nameWithType: TorchTensor.Div(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Div(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Div(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Div(Scalar)
  nameWithType: TorchTensor.Div(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Div(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.DivInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: DivInPlace(Scalar)
  nameWithType: TorchTensor.DivInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.DivInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.DivInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: DivInPlace(TorchTensor)
  nameWithType: TorchTensor.DivInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.DivInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Eq(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Eq(Scalar)
  nameWithType: TorchTensor.Eq(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Eq(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Eq(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Eq(TorchTensor)
  nameWithType: TorchTensor.Eq(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Eq(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.EqInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: EqInPlace(Scalar)
  nameWithType: TorchTensor.EqInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.EqInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.EqInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: EqInPlace(TorchTensor)
  nameWithType: TorchTensor.EqInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.EqInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Equal(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equal(TorchTensor)
  nameWithType: TorchTensor.Equal(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Equal(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Equals(System.Object)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equals(Object)
  nameWithType: TorchTensor.Equals(Object)
  fullName: TorchSharp.Tensor.TorchTensor.Equals(Object)
  type: method
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TorchSharp.Tensor.TorchTensor.Erf
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Erf()
  nameWithType: TorchTensor.Erf()
  fullName: TorchSharp.Tensor.TorchTensor.Erf()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.ErfInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ErfInPlace()
  nameWithType: TorchTensor.ErfInPlace()
  fullName: TorchSharp.Tensor.TorchTensor.ErfInPlace()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Exp
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Exp()
  nameWithType: TorchTensor.Exp()
  fullName: TorchSharp.Tensor.TorchTensor.Exp()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Ge(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Ge(Scalar)
  nameWithType: TorchTensor.Ge(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Ge(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Ge(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Ge(TorchTensor)
  nameWithType: TorchTensor.Ge(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Ge(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GeInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GeInPlace(Scalar)
  nameWithType: TorchTensor.GeInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GeInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GeInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GeInPlace(TorchTensor)
  nameWithType: TorchTensor.GeInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GeInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GetHashCode
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GetHashCode()
  nameWithType: TorchTensor.GetHashCode()
  fullName: TorchSharp.Tensor.TorchTensor.GetHashCode()
  type: method
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TorchSharp.Tensor.TorchTensor.GetTensorDimension(System.Int32)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GetTensorDimension(Int32)
  nameWithType: TorchTensor.GetTensorDimension(Int32)
  fullName: TorchSharp.Tensor.TorchTensor.GetTensorDimension(Int32)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GetTensorStride(System.Int32)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GetTensorStride(Int32)
  nameWithType: TorchTensor.GetTensorStride(Int32)
  fullName: TorchSharp.Tensor.TorchTensor.GetTensorStride(Int32)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Grad
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Grad()
  nameWithType: TorchTensor.Grad()
  fullName: TorchSharp.Tensor.TorchTensor.Grad()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Gt(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Gt(Scalar)
  nameWithType: TorchTensor.Gt(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Gt(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Gt(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Gt(TorchTensor)
  nameWithType: TorchTensor.Gt(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Gt(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GtInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GtInPlace(Scalar)
  nameWithType: TorchTensor.GtInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GtInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GtInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GtInPlace(TorchTensor)
  nameWithType: TorchTensor.GtInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GtInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Handle
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Handle
  nameWithType: TorchTensor.Handle
  fullName: TorchSharp.Tensor.TorchTensor.Handle
  type: property
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: TorchSharp.Tensor.TorchTensor.IndexSelect(System.Int64,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IndexSelect(Int64, TorchTensor)
  nameWithType: TorchTensor.IndexSelect(Int64, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.IndexSelect(Int64, TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Indices
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Indices
  nameWithType: TorchTensor.Indices
  fullName: TorchSharp.Tensor.TorchTensor.Indices
  type: property
- uid: TorchSharp.Tensor.TorchTensor.IsGradRequired
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IsGradRequired
  nameWithType: TorchTensor.IsGradRequired
  fullName: TorchSharp.Tensor.TorchTensor.IsGradRequired
  type: property
- uid: TorchSharp.Tensor.TorchTensor.IsSparse
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IsSparse
  nameWithType: TorchTensor.IsSparse
  fullName: TorchSharp.Tensor.TorchTensor.IsSparse
  type: property
- uid: TorchSharp.Tensor.TorchTensor.IsVariable
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IsVariable
  nameWithType: TorchTensor.IsVariable
  fullName: TorchSharp.Tensor.TorchTensor.IsVariable
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Item
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Item()
  nameWithType: TorchTensor.Item()
  fullName: TorchSharp.Tensor.TorchTensor.Item()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Le(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Le(Scalar)
  nameWithType: TorchTensor.Le(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Le(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Le(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Le(TorchTensor)
  nameWithType: TorchTensor.Le(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Le(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LeInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LeInPlace(Scalar)
  nameWithType: TorchTensor.LeInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LeInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LeInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LeInPlace(TorchTensor)
  nameWithType: TorchTensor.LeInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LeInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Log
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Log()
  nameWithType: TorchTensor.Log()
  fullName: TorchSharp.Tensor.TorchTensor.Log()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LogInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LogInPlace()
  nameWithType: TorchTensor.LogInPlace()
  fullName: TorchSharp.Tensor.TorchTensor.LogInPlace()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Lt(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Lt(Scalar)
  nameWithType: TorchTensor.Lt(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Lt(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Lt(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Lt(TorchTensor)
  nameWithType: TorchTensor.Lt(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Lt(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LtInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LtInPlace(Scalar)
  nameWithType: TorchTensor.LtInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LtInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LtInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LtInPlace(TorchTensor)
  nameWithType: TorchTensor.LtInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LtInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.MatMul(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: MatMul(TorchTensor)
  nameWithType: TorchTensor.MatMul(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.MatMul(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Max(System.Int64,System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Max(Int64, Boolean)
  nameWithType: TorchTensor.Max(Int64, Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Max(Int64, Boolean)
  type: method
- uid: System.ValueTuple`2
  isExternal: true
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: System.ValueTuple{TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor}
  parent: System
  name: ValueTuple<TorchTensor,TorchTensor>
  nameWithType: ValueTuple<TorchTensor,TorchTensor>
  fullName: System.ValueTuple<TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor>
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: TorchSharp.Tensor.TorchTensor
    name: TorchTensor
    nameWithType: TorchTensor
    fullName: TorchSharp.Tensor.TorchTensor
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TorchSharp.Tensor.TorchTensor
    name: TorchTensor
    nameWithType: TorchTensor
    fullName: TorchSharp.Tensor.TorchTensor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.Tensor.TorchTensor.Mean
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Mean()
  nameWithType: TorchTensor.Mean()
  fullName: TorchSharp.Tensor.TorchTensor.Mean()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Mm(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Mm(TorchTensor)
  nameWithType: TorchTensor.Mm(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Mm(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Mul(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Mul(TorchTensor)
  nameWithType: TorchTensor.Mul(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Mul(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Mul(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Mul(Scalar)
  nameWithType: TorchTensor.Mul(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Mul(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.MulInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: MulInPlace(Scalar)
  nameWithType: TorchTensor.MulInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.MulInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.MulInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: MulInPlace(TorchTensor)
  nameWithType: TorchTensor.MulInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.MulInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Ne(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Ne(Scalar)
  nameWithType: TorchTensor.Ne(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Ne(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Ne(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Ne(TorchTensor)
  nameWithType: TorchTensor.Ne(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Ne(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.NeInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: NeInPlace(Scalar)
  nameWithType: TorchTensor.NeInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.NeInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.NeInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: NeInPlace(TorchTensor)
  nameWithType: TorchTensor.NeInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.NeInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Norm(System.Int32,System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Norm(Int32, Boolean)
  nameWithType: TorchTensor.Norm(Int32, Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Norm(Int32, Boolean)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.NumberOfElements
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: NumberOfElements
  nameWithType: TorchTensor.NumberOfElements
  fullName: TorchSharp.Tensor.TorchTensor.NumberOfElements
  type: property
- uid: TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addition(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Addition(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Addition(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addition(Scalar, TorchTensor)
  nameWithType: TorchTensor.Addition(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Addition(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Addition(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addition(TorchTensor, Scalar)
  nameWithType: TorchTensor.Addition(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Addition(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Division(Scalar, TorchTensor)
  nameWithType: TorchTensor.Division(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Division(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Division(TorchTensor, Scalar)
  nameWithType: TorchTensor.Division(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Division(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Division(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Division(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Division(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Division(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equality(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Equality(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Equality(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equality(Scalar, TorchTensor)
  nameWithType: TorchTensor.Equality(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Equality(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Equality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equality(TorchTensor, Scalar)
  nameWithType: TorchTensor.Equality(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Equality(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThan(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.GreaterThan(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThan(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThan(Scalar, TorchTensor)
  nameWithType: TorchTensor.GreaterThan(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThan(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThan(TorchTensor, Scalar)
  nameWithType: TorchTensor.GreaterThan(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThan(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThanOrEqual(Scalar, TorchTensor)
  nameWithType: TorchTensor.GreaterThanOrEqual(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThanOrEqual(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThanOrEqual(TorchTensor, Scalar)
  nameWithType: TorchTensor.GreaterThanOrEqual(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThanOrEqual(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThanOrEqual(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.GreaterThanOrEqual(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThanOrEqual(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Inequality(Scalar, TorchTensor)
  nameWithType: TorchTensor.Inequality(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Inequality(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Inequality(TorchTensor, Scalar)
  nameWithType: TorchTensor.Inequality(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Inequality(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Inequality(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Inequality(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Inequality(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Inequality(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThan(TorchTensor, Scalar)
  nameWithType: TorchTensor.LessThan(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LessThan(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThan(Scalar, TorchTensor)
  nameWithType: TorchTensor.LessThan(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThan(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThan(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThan(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.LessThan(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThan(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThanOrEqual(Scalar, TorchTensor)
  nameWithType: TorchTensor.LessThanOrEqual(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThanOrEqual(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThanOrEqual(TorchTensor, Scalar)
  nameWithType: TorchTensor.LessThanOrEqual(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.LessThanOrEqual(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThanOrEqual(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.LessThanOrEqual(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.LessThanOrEqual(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Modulus(TorchTensor, Scalar)
  nameWithType: TorchTensor.Modulus(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Modulus(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Modulus(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Modulus(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Modulus(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Modulus(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Modulus(Scalar, TorchTensor)
  nameWithType: TorchTensor.Modulus(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Modulus(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Multiply(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Multiply(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Multiply(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Multiply(Scalar, TorchTensor)
  nameWithType: TorchTensor.Multiply(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Multiply(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Multiply(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Multiply(TorchTensor, Scalar)
  nameWithType: TorchTensor.Multiply(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Multiply(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Scalar,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Subtraction(Scalar, TorchTensor)
  nameWithType: TorchTensor.Subtraction(Scalar, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Subtraction(Scalar, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Subtraction(TorchTensor, Scalar)
  nameWithType: TorchTensor.Subtraction(TorchTensor, Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Subtraction(TorchTensor, Scalar)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Subtraction(TorchSharp.Tensor.TorchTensor,TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Subtraction(TorchTensor, TorchTensor)
  nameWithType: TorchTensor.Subtraction(TorchTensor, TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Subtraction(TorchTensor, TorchTensor)
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.Pow(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Pow(Scalar)
  nameWithType: TorchTensor.Pow(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Pow(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Remainder(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Remainder(Scalar)
  nameWithType: TorchTensor.Remainder(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Remainder(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Remainder(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Remainder(TorchTensor)
  nameWithType: TorchTensor.Remainder(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Remainder(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: RemainderInPlace(Scalar)
  nameWithType: TorchTensor.RemainderInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.RemainderInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: RemainderInPlace(TorchTensor)
  nameWithType: TorchTensor.RemainderInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.RemainderInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.RequiresGrad(System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: RequiresGrad(Boolean)
  nameWithType: TorchTensor.RequiresGrad(Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.RequiresGrad(Boolean)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Reshape(System.Int64[])
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Reshape(Int64[])
  nameWithType: TorchTensor.Reshape(Int64[])
  fullName: TorchSharp.Tensor.TorchTensor.Reshape(Int64[])
  type: method
- uid: System.Int64[]
  parent: System
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: TorchSharp.Tensor.TorchTensor.Shape
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Shape
  nameWithType: TorchTensor.Shape
  fullName: TorchSharp.Tensor.TorchTensor.Shape
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Sigmoid
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sigmoid()
  nameWithType: TorchTensor.Sigmoid()
  fullName: TorchSharp.Tensor.TorchTensor.Sigmoid()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Squeeze(System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Squeeze(Int64)
  nameWithType: TorchTensor.Squeeze(Int64)
  fullName: TorchSharp.Tensor.TorchTensor.Squeeze(Int64)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Strides
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Strides
  nameWithType: TorchTensor.Strides
  fullName: TorchSharp.Tensor.TorchTensor.Strides
  type: property
- uid: System.Span{System.Int64}
  parent: System
  name: Span<Int64>
  nameWithType: Span<Int64>
  fullName: System.Span<System.Int64>
  spec.csharp:
  - uid: System.Span`1
    name: Span
    nameWithType: Span
    fullName: System.Span
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.Tensor.TorchTensor.Sub(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sub(TorchTensor)
  nameWithType: TorchTensor.Sub(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.Sub(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Sub(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sub(Scalar)
  nameWithType: TorchTensor.Sub(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.Sub(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.SubInPlace(TorchSharp.Scalar)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: SubInPlace(Scalar)
  nameWithType: TorchTensor.SubInPlace(Scalar)
  fullName: TorchSharp.Tensor.TorchTensor.SubInPlace(Scalar)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.SubInPlace(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: SubInPlace(TorchTensor)
  nameWithType: TorchTensor.SubInPlace(TorchTensor)
  fullName: TorchSharp.Tensor.TorchTensor.SubInPlace(TorchTensor)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Sum
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sum()
  nameWithType: TorchTensor.Sum()
  fullName: TorchSharp.Tensor.TorchTensor.Sum()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Sum(System.Int64[],System.Boolean)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sum(Int64[], Boolean)
  nameWithType: TorchTensor.Sum(Int64[], Boolean)
  fullName: TorchSharp.Tensor.TorchTensor.Sum(Int64[], Boolean)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.T
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: T()
  nameWithType: TorchTensor.T()
  fullName: TorchSharp.Tensor.TorchTensor.T()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: TensorItems[Int64]
  nameWithType: TorchTensor.TensorItems[Int64]
  fullName: TorchSharp.Tensor.TorchTensor.TensorItems[Int64]
  type: property
- uid: TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: TensorItems[Int64, Int64]
  nameWithType: TorchTensor.TensorItems[Int64, Int64]
  fullName: TorchSharp.Tensor.TorchTensor.TensorItems[Int64, Int64]
  type: property
- uid: TorchSharp.Tensor.TorchTensor.TensorItems(System.Int64,System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: TensorItems[Int64, Int64, Int64]
  nameWithType: TorchTensor.TensorItems[Int64, Int64, Int64]
  fullName: TorchSharp.Tensor.TorchTensor.TensorItems[Int64, Int64, Int64]
  type: property
- uid: TorchSharp.Tensor.TorchTensor.ToDense
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ToDense()
  nameWithType: TorchTensor.ToDense()
  fullName: TorchSharp.Tensor.TorchTensor.ToDense()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.ToString
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ToString()
  nameWithType: TorchTensor.ToString()
  fullName: TorchSharp.Tensor.TorchTensor.ToString()
  type: method
- uid: TorchSharp.Tensor.TorchTensor.ToType(TorchSharp.Tensor.ATenScalarMapping)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ToType(ATenScalarMapping)
  nameWithType: TorchTensor.ToType(ATenScalarMapping)
  fullName: TorchSharp.Tensor.TorchTensor.ToType(ATenScalarMapping)
  type: method
- uid: TorchSharp.Tensor.ATenScalarMapping
  parent: TorchSharp.Tensor
  isExternal: false
  name: ATenScalarMapping
  nameWithType: ATenScalarMapping
  fullName: TorchSharp.Tensor.ATenScalarMapping
- uid: TorchSharp.Tensor.TorchTensor.Transpose(System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Transpose(Int64, Int64)
  nameWithType: TorchTensor.Transpose(Int64, Int64)
  fullName: TorchSharp.Tensor.TorchTensor.Transpose(Int64, Int64)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.TransposeInPlace(System.Int64,System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: TransposeInPlace(Int64, Int64)
  nameWithType: TorchTensor.TransposeInPlace(Int64, Int64)
  fullName: TorchSharp.Tensor.TorchTensor.TransposeInPlace(Int64, Int64)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Type
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Type
  nameWithType: TorchTensor.Type
  fullName: TorchSharp.Tensor.TorchTensor.Type
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Unsqueeze(System.Int64)
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Unsqueeze(Int64)
  nameWithType: TorchTensor.Unsqueeze(Int64)
  fullName: TorchSharp.Tensor.TorchTensor.Unsqueeze(Int64)
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Values
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Values
  nameWithType: TorchTensor.Values
  fullName: TorchSharp.Tensor.TorchTensor.Values
  type: property
- uid: TorchSharp.Tensor.TorchTensor.View(System.Int64[])
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: View(Int64[])
  nameWithType: TorchTensor.View(Int64[])
  fullName: TorchSharp.Tensor.TorchTensor.View(Int64[])
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Add*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Add
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Add
  nameWithType: TorchTensor.Add
  fullName: TorchSharp.Tensor.TorchTensor.Add
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Addbmm*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Addbmm
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addbmm
  nameWithType: TorchTensor.Addbmm
  fullName: TorchSharp.Tensor.TorchTensor.Addbmm
  type: method
- uid: TorchSharp.Tensor.TorchTensor.AddInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.AddInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: AddInPlace
  nameWithType: TorchTensor.AddInPlace
  fullName: TorchSharp.Tensor.TorchTensor.AddInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Addmm*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Addmm
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addmm
  nameWithType: TorchTensor.Addmm
  fullName: TorchSharp.Tensor.TorchTensor.Addmm
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Argmax*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Argmax
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Argmax
  nameWithType: TorchTensor.Argmax
  fullName: TorchSharp.Tensor.TorchTensor.Argmax
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Backward*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Backward
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Backward
  nameWithType: TorchTensor.Backward
  fullName: TorchSharp.Tensor.TorchTensor.Backward
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Baddbmm*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Baddbmm
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Baddbmm
  nameWithType: TorchTensor.Baddbmm
  fullName: TorchSharp.Tensor.TorchTensor.Baddbmm
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Bmm*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Bmm
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Bmm
  nameWithType: TorchTensor.Bmm
  fullName: TorchSharp.Tensor.TorchTensor.Bmm
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Clamp*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Clamp
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Clamp
  nameWithType: TorchTensor.Clamp
  fullName: TorchSharp.Tensor.TorchTensor.Clamp
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Clone*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Clone
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Clone
  nameWithType: TorchTensor.Clone
  fullName: TorchSharp.Tensor.TorchTensor.Clone
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Contiguous*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Contiguous
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Contiguous
  nameWithType: TorchTensor.Contiguous
  fullName: TorchSharp.Tensor.TorchTensor.Contiguous
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Cpu*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Cpu
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Cpu
  nameWithType: TorchTensor.Cpu
  fullName: TorchSharp.Tensor.TorchTensor.Cpu
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Cuda*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Cuda
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Cuda
  nameWithType: TorchTensor.Cuda
  fullName: TorchSharp.Tensor.TorchTensor.Cuda
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Data*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Data
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Data
  nameWithType: TorchTensor.Data
  fullName: TorchSharp.Tensor.TorchTensor.Data
  type: method
- uid: TorchSharp.Tensor.TorchTensor.DataItem*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.DataItem
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: DataItem
  nameWithType: TorchTensor.DataItem
  fullName: TorchSharp.Tensor.TorchTensor.DataItem
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Device*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Device
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Device
  nameWithType: TorchTensor.Device
  fullName: TorchSharp.Tensor.TorchTensor.Device
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Dimensions*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Dimensions
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Dimensions
  nameWithType: TorchTensor.Dimensions
  fullName: TorchSharp.Tensor.TorchTensor.Dimensions
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Dispose*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Dispose
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Dispose
  nameWithType: TorchTensor.Dispose
  fullName: TorchSharp.Tensor.TorchTensor.Dispose
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Div*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Div
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Div
  nameWithType: TorchTensor.Div
  fullName: TorchSharp.Tensor.TorchTensor.Div
  type: method
- uid: TorchSharp.Tensor.TorchTensor.DivInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.DivInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: DivInPlace
  nameWithType: TorchTensor.DivInPlace
  fullName: TorchSharp.Tensor.TorchTensor.DivInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Eq*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Eq
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Eq
  nameWithType: TorchTensor.Eq
  fullName: TorchSharp.Tensor.TorchTensor.Eq
  type: method
- uid: TorchSharp.Tensor.TorchTensor.EqInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.EqInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: EqInPlace
  nameWithType: TorchTensor.EqInPlace
  fullName: TorchSharp.Tensor.TorchTensor.EqInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Equal*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Equal
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equal
  nameWithType: TorchTensor.Equal
  fullName: TorchSharp.Tensor.TorchTensor.Equal
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Equals*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Equals
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equals
  nameWithType: TorchTensor.Equals
  fullName: TorchSharp.Tensor.TorchTensor.Equals
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Erf*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Erf
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Erf
  nameWithType: TorchTensor.Erf
  fullName: TorchSharp.Tensor.TorchTensor.Erf
  type: method
- uid: TorchSharp.Tensor.TorchTensor.ErfInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.ErfInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ErfInPlace
  nameWithType: TorchTensor.ErfInPlace
  fullName: TorchSharp.Tensor.TorchTensor.ErfInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Exp*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Exp
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Exp
  nameWithType: TorchTensor.Exp
  fullName: TorchSharp.Tensor.TorchTensor.Exp
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Ge*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Ge
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Ge
  nameWithType: TorchTensor.Ge
  fullName: TorchSharp.Tensor.TorchTensor.Ge
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GeInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.GeInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GeInPlace
  nameWithType: TorchTensor.GeInPlace
  fullName: TorchSharp.Tensor.TorchTensor.GeInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GetHashCode*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.GetHashCode
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GetHashCode
  nameWithType: TorchTensor.GetHashCode
  fullName: TorchSharp.Tensor.TorchTensor.GetHashCode
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GetTensorDimension*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.GetTensorDimension
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GetTensorDimension
  nameWithType: TorchTensor.GetTensorDimension
  fullName: TorchSharp.Tensor.TorchTensor.GetTensorDimension
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GetTensorStride*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.GetTensorStride
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GetTensorStride
  nameWithType: TorchTensor.GetTensorStride
  fullName: TorchSharp.Tensor.TorchTensor.GetTensorStride
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Grad*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Grad
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Grad
  nameWithType: TorchTensor.Grad
  fullName: TorchSharp.Tensor.TorchTensor.Grad
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Gt*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Gt
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Gt
  nameWithType: TorchTensor.Gt
  fullName: TorchSharp.Tensor.TorchTensor.Gt
  type: method
- uid: TorchSharp.Tensor.TorchTensor.GtInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.GtInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GtInPlace
  nameWithType: TorchTensor.GtInPlace
  fullName: TorchSharp.Tensor.TorchTensor.GtInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Handle*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Handle
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Handle
  nameWithType: TorchTensor.Handle
  fullName: TorchSharp.Tensor.TorchTensor.Handle
  type: property
- uid: TorchSharp.Tensor.TorchTensor.IndexSelect*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.IndexSelect
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IndexSelect
  nameWithType: TorchTensor.IndexSelect
  fullName: TorchSharp.Tensor.TorchTensor.IndexSelect
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Indices*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Indices
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Indices
  nameWithType: TorchTensor.Indices
  fullName: TorchSharp.Tensor.TorchTensor.Indices
  type: property
- uid: TorchSharp.Tensor.TorchTensor.IsGradRequired*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.IsGradRequired
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IsGradRequired
  nameWithType: TorchTensor.IsGradRequired
  fullName: TorchSharp.Tensor.TorchTensor.IsGradRequired
  type: property
- uid: TorchSharp.Tensor.TorchTensor.IsSparse*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.IsSparse
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IsSparse
  nameWithType: TorchTensor.IsSparse
  fullName: TorchSharp.Tensor.TorchTensor.IsSparse
  type: property
- uid: TorchSharp.Tensor.TorchTensor.IsVariable*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.IsVariable
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: IsVariable
  nameWithType: TorchTensor.IsVariable
  fullName: TorchSharp.Tensor.TorchTensor.IsVariable
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Item*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Item
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Item
  nameWithType: TorchTensor.Item
  fullName: TorchSharp.Tensor.TorchTensor.Item
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Le*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Le
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Le
  nameWithType: TorchTensor.Le
  fullName: TorchSharp.Tensor.TorchTensor.Le
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LeInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.LeInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LeInPlace
  nameWithType: TorchTensor.LeInPlace
  fullName: TorchSharp.Tensor.TorchTensor.LeInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Log*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Log
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Log
  nameWithType: TorchTensor.Log
  fullName: TorchSharp.Tensor.TorchTensor.Log
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LogInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.LogInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LogInPlace
  nameWithType: TorchTensor.LogInPlace
  fullName: TorchSharp.Tensor.TorchTensor.LogInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Lt*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Lt
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Lt
  nameWithType: TorchTensor.Lt
  fullName: TorchSharp.Tensor.TorchTensor.Lt
  type: method
- uid: TorchSharp.Tensor.TorchTensor.LtInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.LtInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LtInPlace
  nameWithType: TorchTensor.LtInPlace
  fullName: TorchSharp.Tensor.TorchTensor.LtInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.MatMul*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.MatMul
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: MatMul
  nameWithType: TorchTensor.MatMul
  fullName: TorchSharp.Tensor.TorchTensor.MatMul
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Max*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Max
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Max
  nameWithType: TorchTensor.Max
  fullName: TorchSharp.Tensor.TorchTensor.Max
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Mean*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Mean
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Mean
  nameWithType: TorchTensor.Mean
  fullName: TorchSharp.Tensor.TorchTensor.Mean
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Mm*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Mm
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Mm
  nameWithType: TorchTensor.Mm
  fullName: TorchSharp.Tensor.TorchTensor.Mm
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Mul*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Mul
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Mul
  nameWithType: TorchTensor.Mul
  fullName: TorchSharp.Tensor.TorchTensor.Mul
  type: method
- uid: TorchSharp.Tensor.TorchTensor.MulInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.MulInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: MulInPlace
  nameWithType: TorchTensor.MulInPlace
  fullName: TorchSharp.Tensor.TorchTensor.MulInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Ne*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Ne
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Ne
  nameWithType: TorchTensor.Ne
  fullName: TorchSharp.Tensor.TorchTensor.Ne
  type: method
- uid: TorchSharp.Tensor.TorchTensor.NeInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.NeInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: NeInPlace
  nameWithType: TorchTensor.NeInPlace
  fullName: TorchSharp.Tensor.TorchTensor.NeInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Norm*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Norm
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Norm
  nameWithType: TorchTensor.Norm
  fullName: TorchSharp.Tensor.TorchTensor.Norm
  type: method
- uid: TorchSharp.Tensor.TorchTensor.NumberOfElements*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.NumberOfElements
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: NumberOfElements
  nameWithType: TorchTensor.NumberOfElements
  fullName: TorchSharp.Tensor.TorchTensor.NumberOfElements
  type: property
- uid: TorchSharp.Tensor.TorchTensor.op_Addition*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_Addition
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Addition
  nameWithType: TorchTensor.Addition
  fullName: TorchSharp.Tensor.TorchTensor.Addition
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Division*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_Division
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Division
  nameWithType: TorchTensor.Division
  fullName: TorchSharp.Tensor.TorchTensor.Division
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Equality*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_Equality
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Equality
  nameWithType: TorchTensor.Equality
  fullName: TorchSharp.Tensor.TorchTensor.Equality
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThan*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_GreaterThan
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThan
  nameWithType: TorchTensor.GreaterThan
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThan
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_GreaterThanOrEqual
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: TorchTensor.GreaterThanOrEqual
  fullName: TorchSharp.Tensor.TorchTensor.GreaterThanOrEqual
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Inequality*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_Inequality
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Inequality
  nameWithType: TorchTensor.Inequality
  fullName: TorchSharp.Tensor.TorchTensor.Inequality
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThan*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_LessThan
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThan
  nameWithType: TorchTensor.LessThan
  fullName: TorchSharp.Tensor.TorchTensor.LessThan
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_LessThanOrEqual
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: LessThanOrEqual
  nameWithType: TorchTensor.LessThanOrEqual
  fullName: TorchSharp.Tensor.TorchTensor.LessThanOrEqual
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Modulus*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_Modulus
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Modulus
  nameWithType: TorchTensor.Modulus
  fullName: TorchSharp.Tensor.TorchTensor.Modulus
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Multiply*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_Multiply
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Multiply
  nameWithType: TorchTensor.Multiply
  fullName: TorchSharp.Tensor.TorchTensor.Multiply
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.op_Subtraction*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.op_Subtraction
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Subtraction
  nameWithType: TorchTensor.Subtraction
  fullName: TorchSharp.Tensor.TorchTensor.Subtraction
  type: operator
- uid: TorchSharp.Tensor.TorchTensor.Pow*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Pow
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Pow
  nameWithType: TorchTensor.Pow
  fullName: TorchSharp.Tensor.TorchTensor.Pow
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Remainder*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Remainder
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Remainder
  nameWithType: TorchTensor.Remainder
  fullName: TorchSharp.Tensor.TorchTensor.Remainder
  type: method
- uid: TorchSharp.Tensor.TorchTensor.RemainderInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.RemainderInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: RemainderInPlace
  nameWithType: TorchTensor.RemainderInPlace
  fullName: TorchSharp.Tensor.TorchTensor.RemainderInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.RequiresGrad*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.RequiresGrad
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: RequiresGrad
  nameWithType: TorchTensor.RequiresGrad
  fullName: TorchSharp.Tensor.TorchTensor.RequiresGrad
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Reshape*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Reshape
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Reshape
  nameWithType: TorchTensor.Reshape
  fullName: TorchSharp.Tensor.TorchTensor.Reshape
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Shape*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Shape
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Shape
  nameWithType: TorchTensor.Shape
  fullName: TorchSharp.Tensor.TorchTensor.Shape
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Sigmoid*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Sigmoid
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sigmoid
  nameWithType: TorchTensor.Sigmoid
  fullName: TorchSharp.Tensor.TorchTensor.Sigmoid
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Squeeze*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Squeeze
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Squeeze
  nameWithType: TorchTensor.Squeeze
  fullName: TorchSharp.Tensor.TorchTensor.Squeeze
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Strides*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Strides
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Strides
  nameWithType: TorchTensor.Strides
  fullName: TorchSharp.Tensor.TorchTensor.Strides
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Sub*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Sub
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sub
  nameWithType: TorchTensor.Sub
  fullName: TorchSharp.Tensor.TorchTensor.Sub
  type: method
- uid: TorchSharp.Tensor.TorchTensor.SubInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.SubInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: SubInPlace
  nameWithType: TorchTensor.SubInPlace
  fullName: TorchSharp.Tensor.TorchTensor.SubInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Sum*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Sum
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Sum
  nameWithType: TorchTensor.Sum
  fullName: TorchSharp.Tensor.TorchTensor.Sum
  type: method
- uid: TorchSharp.Tensor.TorchTensor.T*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.T
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: T
  nameWithType: TorchTensor.T
  fullName: TorchSharp.Tensor.TorchTensor.T
  type: method
- uid: TorchSharp.Tensor.TorchTensor.TensorItems*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.TensorItems
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: TensorItems[Int64, Int64, Int64]
  nameWithType: TorchTensor.TensorItems[Int64, Int64, Int64]
  fullName: TorchSharp.Tensor.TorchTensor.TensorItems[Int64]
  type: property
- uid: TorchSharp.Tensor.TorchTensor.ToDense*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.ToDense
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ToDense
  nameWithType: TorchTensor.ToDense
  fullName: TorchSharp.Tensor.TorchTensor.ToDense
  type: method
- uid: TorchSharp.Tensor.TorchTensor.ToString*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.ToString
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ToString
  nameWithType: TorchTensor.ToString
  fullName: TorchSharp.Tensor.TorchTensor.ToString
  type: method
- uid: TorchSharp.Tensor.TorchTensor.ToType*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.ToType
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: ToType
  nameWithType: TorchTensor.ToType
  fullName: TorchSharp.Tensor.TorchTensor.ToType
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Transpose*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Transpose
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Transpose
  nameWithType: TorchTensor.Transpose
  fullName: TorchSharp.Tensor.TorchTensor.Transpose
  type: method
- uid: TorchSharp.Tensor.TorchTensor.TransposeInPlace*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.TransposeInPlace
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: TransposeInPlace
  nameWithType: TorchTensor.TransposeInPlace
  fullName: TorchSharp.Tensor.TorchTensor.TransposeInPlace
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Type*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Type
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Type
  nameWithType: TorchTensor.Type
  fullName: TorchSharp.Tensor.TorchTensor.Type
  type: property
- uid: TorchSharp.Tensor.TorchTensor.Unsqueeze*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Unsqueeze
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Unsqueeze
  nameWithType: TorchTensor.Unsqueeze
  fullName: TorchSharp.Tensor.TorchTensor.Unsqueeze
  type: method
- uid: TorchSharp.Tensor.TorchTensor.Values*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.Values
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: Values
  nameWithType: TorchTensor.Values
  fullName: TorchSharp.Tensor.TorchTensor.Values
  type: property
- uid: TorchSharp.Tensor.TorchTensor.View*
  commentId: Overload:TorchSharp.Tensor.TorchTensor.View
  parent: TorchSharp.Tensor.TorchTensor
  isExternal: false
  name: View
  nameWithType: TorchTensor.View
  fullName: TorchSharp.Tensor.TorchTensor.View
  type: method
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
