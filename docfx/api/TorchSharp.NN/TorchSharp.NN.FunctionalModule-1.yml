### YamlMime:ManagedReference
items:
- uid: TorchSharp.NN.FunctionalModule`1
  id: FunctionalModule`1
  children:
  - TorchSharp.NN.FunctionalModule`1.GetModules
  - TorchSharp.NN.FunctionalModule`1.GetName
  - TorchSharp.NN.FunctionalModule`1.NamedParameters
  - TorchSharp.NN.FunctionalModule`1.Parameters
  - TorchSharp.NN.FunctionalModule`1.RegisterModule(TorchSharp.NN.Module)
  - TorchSharp.NN.FunctionalModule`1.ZeroGrad
  langs:
  - csharp
  name: FunctionalModule<T>
  nameWithType: TorchSharp.NN.FunctionalModule<T>
  fullName: TorchSharp.NN.FunctionalModule<T>
  type: Class
  assemblies:
  - TorchSharp
  namespace: TorchSharp.NN
  summary: This class is used to represent a functional module (e.g., ReLU).
  syntax:
    content: 'public abstract class FunctionalModule<T> : TorchSharp.NN.ProvidedModule'
    typeParameters:
    - id: T
      description: ''
    content.csharp: 'public abstract class FunctionalModule<T> : TorchSharp.NN.ProvidedModule'
  inheritance:
  - System.Object
  - TorchSharp.NN.Module
  - TorchSharp.NN.ProvidedModule
  derivedClasses:
  - TorchSharp.NN.AdaptiveAvgPool2D
  - TorchSharp.NN.FeatureDropout
  - TorchSharp.NN.ReLU
  - TorchSharp.NN.MaxPool2D
  - TorchSharp.NN.Dropout
  - TorchSharp.NN.LogSoftMax
  implements: []
  inheritedMembers:
  - TorchSharp.NN.Module.Dispose
  - TorchSharp.NN.Module.Dispose(System.Boolean)
  - TorchSharp.NN.Module.Eval
  - TorchSharp.NN.Module.Forward(TorchSharp.Tensor.TorchTensor)
  - TorchSharp.NN.Module.GetParameter(System.String)
  - TorchSharp.NN.Module.HasParameter(System.String)
  - TorchSharp.NN.Module.IsTraining
  - TorchSharp.NN.Module.Modules
  - TorchSharp.NN.Module.Train
  modifiers.csharp:
  - public
- uid: TorchSharp.NN.FunctionalModule`1.GetModules
  id: GetModules
  parent: TorchSharp.NN.FunctionalModule`1
  langs:
  - csharp
  name: GetModules()
  nameWithType: FunctionalModule<T>.GetModules()
  fullName: TorchSharp.NN.FunctionalModule<T>.GetModules()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.NN
  syntax:
    content: public override System.Collections.Generic.IEnumerable<string> GetModules ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: ''
    content.csharp: public override System.Collections.Generic.IEnumerable<string> GetModules ();
  overload: TorchSharp.NN.FunctionalModule`1.GetModules*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.NN.FunctionalModule`1.GetName
  id: GetName
  parent: TorchSharp.NN.FunctionalModule`1
  langs:
  - csharp
  name: GetName()
  nameWithType: FunctionalModule<T>.GetName()
  fullName: TorchSharp.NN.FunctionalModule<T>.GetName()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.NN
  syntax:
    content: public override string GetName ();
    parameters: []
    return:
      type: System.String
      description: ''
    content.csharp: public override string GetName ();
  overload: TorchSharp.NN.FunctionalModule`1.GetName*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.NN.FunctionalModule`1.NamedParameters
  id: NamedParameters
  parent: TorchSharp.NN.FunctionalModule`1
  langs:
  - csharp
  name: NamedParameters()
  nameWithType: FunctionalModule<T>.NamedParameters()
  fullName: TorchSharp.NN.FunctionalModule<T>.NamedParameters()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.NN
  syntax:
    content: public override System.Collections.Generic.IEnumerable<ValueTuple<string,TorchSharp.Tensor.TorchTensor>> NamedParameters ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,TorchSharp.Tensor.TorchTensor}}
      description: ''
    content.csharp: public override System.Collections.Generic.IEnumerable<ValueTuple<string,TorchSharp.Tensor.TorchTensor>> NamedParameters ();
  overload: TorchSharp.NN.FunctionalModule`1.NamedParameters*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.NN.FunctionalModule`1.Parameters
  id: Parameters
  parent: TorchSharp.NN.FunctionalModule`1
  langs:
  - csharp
  name: Parameters()
  nameWithType: FunctionalModule<T>.Parameters()
  fullName: TorchSharp.NN.FunctionalModule<T>.Parameters()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.NN
  syntax:
    content: public override System.Collections.Generic.IEnumerable<TorchSharp.Tensor.TorchTensor> Parameters ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TorchSharp.Tensor.TorchTensor}
      description: ''
    content.csharp: public override System.Collections.Generic.IEnumerable<TorchSharp.Tensor.TorchTensor> Parameters ();
  overload: TorchSharp.NN.FunctionalModule`1.Parameters*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.NN.FunctionalModule`1.RegisterModule(TorchSharp.NN.Module)
  id: RegisterModule(TorchSharp.NN.Module)
  parent: TorchSharp.NN.FunctionalModule`1
  langs:
  - csharp
  name: RegisterModule(Module)
  nameWithType: FunctionalModule<T>.RegisterModule(Module)
  fullName: TorchSharp.NN.FunctionalModule<T>.RegisterModule(Module)
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.NN
  syntax:
    content: public override void RegisterModule (TorchSharp.NN.Module module);
    parameters:
    - id: module
      type: TorchSharp.NN.Module
      description: ''
    content.csharp: public override void RegisterModule (TorchSharp.NN.Module module);
  overload: TorchSharp.NN.FunctionalModule`1.RegisterModule*
  exceptions: []
  modifiers.csharp:
  - public
- uid: TorchSharp.NN.FunctionalModule`1.ZeroGrad
  id: ZeroGrad
  parent: TorchSharp.NN.FunctionalModule`1
  langs:
  - csharp
  name: ZeroGrad()
  nameWithType: FunctionalModule<T>.ZeroGrad()
  fullName: TorchSharp.NN.FunctionalModule<T>.ZeroGrad()
  type: Method
  assemblies:
  - TorchSharp
  namespace: TorchSharp.NN
  syntax:
    content: public override void ZeroGrad ();
    parameters: []
    content.csharp: public override void ZeroGrad ();
  overload: TorchSharp.NN.FunctionalModule`1.ZeroGrad*
  exceptions: []
  modifiers.csharp:
  - public
references:
- uid: TorchSharp.NN
  commentId: N:TorchSharp.NN
  isExternal: false
  name: TorchSharp.NN
  nameWithType: TorchSharp.NN
  fullName: TorchSharp.NN
  type: namespace
- uid: TorchSharp.NN.ProvidedModule
  parent: TorchSharp.NN
  isExternal: false
  name: ProvidedModule
  nameWithType: ProvidedModule
  fullName: TorchSharp.NN.ProvidedModule
- uid: TorchSharp.NN.FunctionalModule`1.GetModules
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: GetModules()
  nameWithType: FunctionalModule<T>.GetModules()
  fullName: TorchSharp.NN.FunctionalModule<T>.GetModules()
  type: method
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.Generic.IEnumerable
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.NN.FunctionalModule`1.GetName
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: GetName()
  nameWithType: FunctionalModule<T>.GetName()
  fullName: TorchSharp.NN.FunctionalModule<T>.GetName()
  type: method
- uid: TorchSharp.NN.FunctionalModule`1.NamedParameters
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: NamedParameters()
  nameWithType: FunctionalModule<T>.NamedParameters()
  fullName: TorchSharp.NN.FunctionalModule<T>.NamedParameters()
  type: method
- uid: System.ValueTuple`2
  isExternal: true
  name: ValueTuple
  nameWithType: ValueTuple
  fullName: System.ValueTuple
- uid: TorchSharp.Tensor.TorchTensor
  name: TorchTensor
  nameWithType: TorchTensor
  fullName: TorchSharp.Tensor.TorchTensor
- uid: System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,TorchSharp.Tensor.TorchTensor}}
  parent: System.Collections.Generic
  name: IEnumerable<ValueTuple<String,TorchTensor>>
  nameWithType: IEnumerable<ValueTuple<String,TorchTensor>>
  fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<System.String,TorchSharp.Tensor.TorchTensor>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TorchSharp.Tensor.TorchTensor
    name: TorchTensor
    nameWithType: TorchTensor
    fullName: TorchSharp.Tensor.TorchTensor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.NN.FunctionalModule`1.Parameters
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: Parameters()
  nameWithType: FunctionalModule<T>.Parameters()
  fullName: TorchSharp.NN.FunctionalModule<T>.Parameters()
  type: method
- uid: System.Collections.Generic.IEnumerable{TorchSharp.Tensor.TorchTensor}
  parent: System.Collections.Generic
  name: IEnumerable<TorchTensor>
  nameWithType: IEnumerable<TorchTensor>
  fullName: System.Collections.Generic.IEnumerable<TorchSharp.Tensor.TorchTensor>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TorchSharp.Tensor.TorchTensor
    name: TorchTensor
    nameWithType: TorchTensor
    fullName: TorchSharp.Tensor.TorchTensor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TorchSharp.NN.FunctionalModule`1.RegisterModule(TorchSharp.NN.Module)
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: RegisterModule(Module)
  nameWithType: FunctionalModule<T>.RegisterModule(Module)
  fullName: TorchSharp.NN.FunctionalModule<T>.RegisterModule(Module)
  type: method
- uid: TorchSharp.NN.Module
  parent: TorchSharp.NN
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: TorchSharp.NN.Module
- uid: TorchSharp.NN.FunctionalModule`1.ZeroGrad
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: ZeroGrad()
  nameWithType: FunctionalModule<T>.ZeroGrad()
  fullName: TorchSharp.NN.FunctionalModule<T>.ZeroGrad()
  type: method
- uid: TorchSharp.NN.FunctionalModule`1.GetModules*
  commentId: Overload:TorchSharp.NN.FunctionalModule`1.GetModules
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: GetModules
  nameWithType: FunctionalModule<T>.GetModules
  fullName: TorchSharp.NN.FunctionalModule<T>.GetModules
  type: method
- uid: TorchSharp.NN.FunctionalModule`1.GetName*
  commentId: Overload:TorchSharp.NN.FunctionalModule`1.GetName
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: GetName
  nameWithType: FunctionalModule<T>.GetName
  fullName: TorchSharp.NN.FunctionalModule<T>.GetName
  type: method
- uid: TorchSharp.NN.FunctionalModule`1.NamedParameters*
  commentId: Overload:TorchSharp.NN.FunctionalModule`1.NamedParameters
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: NamedParameters
  nameWithType: FunctionalModule<T>.NamedParameters
  fullName: TorchSharp.NN.FunctionalModule<T>.NamedParameters
  type: method
- uid: TorchSharp.NN.FunctionalModule`1.Parameters*
  commentId: Overload:TorchSharp.NN.FunctionalModule`1.Parameters
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: Parameters
  nameWithType: FunctionalModule<T>.Parameters
  fullName: TorchSharp.NN.FunctionalModule<T>.Parameters
  type: method
- uid: TorchSharp.NN.FunctionalModule`1.RegisterModule*
  commentId: Overload:TorchSharp.NN.FunctionalModule`1.RegisterModule
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: RegisterModule
  nameWithType: FunctionalModule<T>.RegisterModule
  fullName: TorchSharp.NN.FunctionalModule<T>.RegisterModule
  type: method
- uid: TorchSharp.NN.FunctionalModule`1.ZeroGrad*
  commentId: Overload:TorchSharp.NN.FunctionalModule`1.ZeroGrad
  parent: TorchSharp.NN.FunctionalModule`1
  isExternal: false
  name: ZeroGrad
  nameWithType: FunctionalModule<T>.ZeroGrad
  fullName: TorchSharp.NN.FunctionalModule<T>.ZeroGrad
  type: method
- uid: TorchSharp.NN.Module.Dispose
  parent: TorchSharp.NN.Module
  isExternal: false
  name: Dispose()
  nameWithType: Module.Dispose()
  fullName: TorchSharp.NN.Module.Dispose()
  type: method
- uid: TorchSharp.NN.Module.Dispose(System.Boolean)
  parent: TorchSharp.NN.Module
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Module.Dispose(Boolean)
  fullName: TorchSharp.NN.Module.Dispose(Boolean)
  type: method
- uid: TorchSharp.NN.Module.Eval
  parent: TorchSharp.NN.Module
  isExternal: false
  name: Eval()
  nameWithType: Module.Eval()
  fullName: TorchSharp.NN.Module.Eval()
  type: method
- uid: TorchSharp.NN.Module.Forward(TorchSharp.Tensor.TorchTensor)
  parent: TorchSharp.NN.Module
  isExternal: false
  name: Forward(TorchTensor)
  nameWithType: Module.Forward(TorchTensor)
  fullName: TorchSharp.NN.Module.Forward(TorchTensor)
  type: method
- uid: TorchSharp.NN.Module.GetParameter(System.String)
  parent: TorchSharp.NN.Module
  isExternal: false
  name: GetParameter(String)
  nameWithType: Module.GetParameter(String)
  fullName: TorchSharp.NN.Module.GetParameter(String)
  type: method
- uid: TorchSharp.NN.Module.HasParameter(System.String)
  parent: TorchSharp.NN.Module
  isExternal: false
  name: HasParameter(String)
  nameWithType: Module.HasParameter(String)
  fullName: TorchSharp.NN.Module.HasParameter(String)
  type: method
- uid: TorchSharp.NN.Module.IsTraining
  parent: TorchSharp.NN.Module
  isExternal: false
  name: IsTraining()
  nameWithType: Module.IsTraining()
  fullName: TorchSharp.NN.Module.IsTraining()
  type: method
- uid: TorchSharp.NN.Module.Modules
  parent: TorchSharp.NN.Module
  isExternal: false
  name: Modules
  nameWithType: Module.Modules
  fullName: TorchSharp.NN.Module.Modules
  type: property
- uid: TorchSharp.NN.Module.Train
  parent: TorchSharp.NN.Module
  isExternal: false
  name: Train()
  nameWithType: Module.Train()
  fullName: TorchSharp.NN.Module.Train()
  type: method
- uid: TorchSharp.NN.AdaptiveAvgPool2D
  parent: TorchSharp.NN
  isExternal: false
  name: AdaptiveAvgPool2D
  nameWithType: TorchSharp.NN.AdaptiveAvgPool2D
  fullName: TorchSharp.NN.AdaptiveAvgPool2D
  type: class
- uid: TorchSharp.NN.FeatureDropout
  parent: TorchSharp.NN
  isExternal: false
  name: FeatureDropout
  nameWithType: TorchSharp.NN.FeatureDropout
  fullName: TorchSharp.NN.FeatureDropout
  type: class
- uid: TorchSharp.NN.ReLU
  parent: TorchSharp.NN
  isExternal: false
  name: ReLU
  nameWithType: TorchSharp.NN.ReLU
  fullName: TorchSharp.NN.ReLU
  type: class
- uid: TorchSharp.NN.MaxPool2D
  parent: TorchSharp.NN
  isExternal: false
  name: MaxPool2D
  nameWithType: TorchSharp.NN.MaxPool2D
  fullName: TorchSharp.NN.MaxPool2D
  type: class
- uid: TorchSharp.NN.Dropout
  parent: TorchSharp.NN
  isExternal: false
  name: Dropout
  nameWithType: TorchSharp.NN.Dropout
  fullName: TorchSharp.NN.Dropout
  type: class
- uid: TorchSharp.NN.LogSoftMax
  parent: TorchSharp.NN
  isExternal: false
  name: LogSoftMax
  nameWithType: TorchSharp.NN.LogSoftMax
  fullName: TorchSharp.NN.LogSoftMax
  type: class
